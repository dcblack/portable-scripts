#!/usr/bin/env bash

function Realpath() {
  if [[ $# == 0 ]]; then set - .; fi
  /usr/bin/perl '-MCwd(abs_path)' -le '$p=abs_path(join(q( ),@ARGV));print $p if -e $p' "$*"
}

# l=last c=current n=next wd=working_directory ws=working_script
export ACTION lwd nwd lws cws nws
function j() {
  export j_VERSION=1.4 FAVS
  # Synopsis
  #   j - more powerful alternative to cd (aka jump)
  # Syntax
  #   j DIR(S)
  # Begin parsing options
  #-----------------------------------------------------------------------------
  export ACTION PATH lwd nwd lws cws nws
  local J_VERBOSE J_NOSCRIPT J_DEBUG J_SHOW TMP1 TMP2 J_MK
  #local FAV FAV1
  J_VERBOSE=0
  J_NOSCRIPT=0
  J_SHOW=0
  J_DEBUG=0
  # Setup favorites list if not defined via exported FAVS variable
  if [[ -z "${FAVS}" ]]; then
    local fav
    for fav in favs .favs Favorites; do
      FAVS="$(Realpath "${HOME}/${fav}")"
      if [[ -n "${FAVS}" ]]; then
        break
      fi
    done
  fi
  if [[ $# != 0 ]]; then
    # Parse command-line options
    while [[ "$1" =~ ^-. ]]; do
      Report_debug "$1" -if "${J_DEBUG:-0}"
      case "$1" in
      -h | -help | --help) cat 1>&2 <<EOT
Synopsis
--------

  j - slightly more flexible alternative to change directory 'cd' command (uses cd internally).

Syntax
------

  j -help
  j [OPTIONS] PATH {DIR_OR_FILE}...
  j -list
  j -rm FAV

Description
-----------

  For each argument, j uses case-insensitive globbing to
  locate that element.

  If it finds a directory, then *j* moves to that directory
  (cd) and processes the next argument.

  If the result is a path to a non-directory element, then
  it jumps to the directory containing that element.

  Option  | Description
  ------  | -----------
  --debug | Turns on debugging of *this* script
  -help   | Displays this help text
  -list   | Briefly lists all favorites
  -lns    | Lists all favorites exanding their targets
  -mk FAV | Adds a symbolic links to the favorites directory
  -rm FAV | Removes a symbolic links from the favorites directory
  -show   | Pass to setup.profile
  -v      | Verbosely provide information on operation

Examples
--------

  j tlm-? answers EX01
  j ~/syscfund/ex01/ex01.cpp

EOT
        return 0
        ;;
      -d | -debug | --debug )
        J_DEBUG=1
        ;;
      -ns | -noscript | --noscript )
        J_NOSCRIPT=1
        ;;
      -show | --show )
        J_SHOW=1
        ;;
      -v | --verbose )
        J_VERBOSE=1
        ;;
      -l | -list | --list | -favs )
        shift
        if [[ -n "${FAVS}" ]]; then
          if [[ $# -gt 0 ]]; then
            TMP1="$(Add_prefix "${FAVS}/" "$@")"
            /bin/ls "${TMP1}"
          else
            /bin/ls "${FAVS}"
          fi
          Report_info "Use -lns for actual links"
        else
          echo "No favorites directory specified" 1>&2
        fi
        return 0
        ;;
      -mk | --mk )
        shift
        if [[ $# -lt 2 ]]; then Report_error "Requires at least two arguments: j -mk FAV DIRPATH"; return 1; fi
        J_MK="$1"
        shift
        if [[ "${J_MK}" =~ .*/.* ]]; then Report_error "-mk argument must be a simple name"; return 1; fi
        if [[ "${J_MK}" =~ ^[^a-zA-Z0-9].* ]]; then Report_error "-mk argument must begin with an alphanumeric"; return 1; fi
        if [[ "${J_MK}" =~ [^-_+a-zA-Z0-9].* ]]; then Report_error "-mk argument may only use simple names with allowance for hyphen and underscore"; return 1; fi
        if [[ -e "${FAVS}/${J_MK}" ]]; then Report_error "$1 already exists"; return 1; fi
        j "$@"
        TMP1="$(Realpath .)"
        if ln -s "${TMP1}" "${FAVS}/${J_MK}" ; then
          TMP1="$(Realpath "${FAVS}/${J_MK}")"
          Report_info "Created favorite ${J_MK} -> ${TMP1}" ;
        else
          Report_error "Unable to create ${FAVS}/${J_MK}";
        fi
        return 0;
        ;;
      -rm | --rm )
        shift
        if [[ $# != 1 ]]; then Report_error "Requires exactly one argument: j -rm FAV"; return 1; fi
        if [[ "$1" =~ ^[^a-zA-Z0-9].* ]]; then Report_error "First argument must begin with an alphanumeric"; return 1; fi
        if [[ "$1" =~ [^-_a-zA-Z0-9].* ]]; then Report_error "First argument may only use simple names with allowance for hyphen and underscore"; return 1; fi
        if [[ ! -e "${FAVS}/$1" ]]; then Report_error "$1 does not exist"; return 1; fi
        local old
        old="$(Realpath "${FAVS}/$1")"
        rm "${FAVS}/$1" && echo "Removed favorite $1 -> ${old}" ;
        return 0;
        ;;
      -L | -lns | --lns )
        shift
        if [[ -n "${FAVS}" ]]; then
          if [[ $# -gt 0 ]]; then
            TMP1="$(Add_prefix "${FAVS}/" "$@")"
            lns "${TMP1}"
          else
            lns "${FAVS}/"
          fi
        else
          echo "No favorites directory specified" 1>&2
        fi
        return 0
        ;;
      -[1-9])
        ;;
      * ) 
        echo 1>&2 "ERROR: Unknown option $1"
        return 0
        ;;
      esac
      shift
    done
  fi
  Report_debug "Debug on" -if "${J_DEBUG:-0}"
  test "${J_VERBOSE}" = 1 && Report_info "Verbose on"
  # End parsing options
  #-----------------------------------------------------------------------------
  local working_script='setup.profile'

  if [[ -n "${ZSH_VERSION}" ]]; then set -o shwordsplit ; fi

  # Last working directory
  local prev_lwd="${lwd}"
  lwd="$(Realpath .)"
  if [[ $# == 0 ]]; then
    # shellcheck disable=SC2164
    cd
  else
    while [[ $# != 0 ]]; do
      Report_debug "Arg '%s'" "$1" -if "${J_DEBUG:-0}"
      if [[ "$1" == '-' ]]; then
        # shellcheck disable=SC2164
        cd -
      else
        local PART GLOB
        PART="$1"
        if [[ "${PART}" =~ ^[A-Z]: ]]; then # Convert windows path to WSL
          PART="$(perl -le '$_=shift;s{^([A-Z]):}{};$d=lc$1;s{\\}{\/}g;print qq{/mnt/$d$_}' "$1")"
        fi
        GLOB="$(/usr/bin/perl -le '@d=glob(shift @ARGV);print shift @d' "$1")"
        Report_debug "DEBUG: PART='%s'" "${PART}" -if "${J_DEBUG:-0}"
        Report_debug "DEBUG: GLOB='%s'" "${GLOB}" -if "${J_DEBUG:-0}"
        if [[ -e "${PART}" && -f "${PART}" ]]; then
          PART=$(dirname "${PART}")
        fi
        # ToDo: add case-insensitivity
        # zhellcheck disable=SC2164
        local DEST
        DEST=""
        if   cd "${PART}" 1>/dev/null 2>&1 ; then DEST="$(Realpath .)" ;
        elif cd "${GLOB}" 1>/dev/null 2>&1 ; then DEST="$(Realpath .)" ; fi
        if [[ -n "${DEST}" ]]; then
          cd "${DEST}" 1>/dev/null 2>&1 || Report_error "Bug in script j"
        else
          Report_warning "Unable to locate ${PART}"
          break
        fi
      fi
      shift
    done
  fi
  Report_debug "Saving working directory" -if "${J_DEBUG:-0}"
  # Save current location as the working directory
  local next_wd
  next_wd="$(Realpath .)"
  # Go back to original directory then forward to simulate a single jump
  # shellcheck disable=SC2164
  cd "${lwd}" 2>/dev/null 1>/dev/null
  # shellcheck disable=SC2164
  cd "${next_wd}"

  if [[ -n "${prev_lwd}" && "${next_wd}" != "${prev_lwd}" ]]; then
    lwd="${prev_lwd}"
  else
    export cwd
    cwd="${next_wd}"
  fi
  TMP1="$(pwd)"
  Report_debug "Landed %s" "${TMP1}" -if "${J_DEBUG:-0}"

  # Save last working script if it was previously set
  if [[ -n "${nws}" ]]; then lws="${nws}"; fi

  # Deal with new working script if it exists
  TMP1="$(Add_suffix "/${working_script}" . .. ../.. ../../.. ../../../.. ../../../../..)"
  nws="$(Firstreal "${TMP1}")"
  Report_debug "Checking for working script nws=%s" "'${nws}'" -if "${J_DEBUG:-0}"
  if [[ -n "${nws}" ]]; then
    nws="$(Realpath "${nws}")"
    local LASTOK NEXTOK REPEAT
    LASTOK=1 NEXTOK=1 REPEAT=0
    # Qualifications to use a working script:
    # 1. Must not be the same as the last working script
    # 2. Must be executable and not a directory
    # 3. Last script must support ACTION variable
    if [[ -n "${lws}" && "${lws}" == "${nws}" ]]; then
      Report_debug "lws set and equal to nws ${nws}" -if "${J_DEBUG:-0}"
      LASTOK=0
      NEXTOK=0
      REPEAT=1
    fi
    if [[ ! -x "${lws}" || -d "${lws}" ]]; then
      LASTOK=0
    fi
    if [[ ${LASTOK} == 1 ]]; then
      if grep -q ACTION "${lws}"; then
        LASTOK=1
      else
        LASTOK=0
      fi
    fi
    if [[ ! -x "${nws}" || -d "${nws}" ]]; then
      NEXTOK=0
      REPEAT=0
      Report_warning "Skipping non-executable ${nws}"
      Report_debug "nws not executable or is a directory ${nws}" -if "${J_DEBUG:-0}"
    fi
    # Source old working script with ACTION='rm'
    if [[ ${LASTOK} == 1 ]]; then
      test "${J_VERBOSE}" = 1 && Report_info "Removing ${nws}"
      export ACTION='rm'
      if [[ ${J_NOSCRIPT} == 0 ]]; then
        # shellcheck disable=SC1090
        source "${lws}" --rm
      fi
    fi
    # Source new working script
    if [[ ${NEXTOK} == 1 ]]; then
      test "${J_VERBOSE}" = 1 && Report_info "Adding ${nws}"
      export ACTION='add'
      if [[ ${J_NOSCRIPT} == 0 ]]; then
        if [[ ${J_SHOW} == 0 ]]; then
          # shellcheck disable=SC1090
          source "${nws}" --add
        else
          # shellcheck disable=SC1090
          source "${nws}" --add --show
        fi
      fi
      cws="${nws}"
    elif [[ ${REPEAT} == 1 ]]; then
      if grep -q ACTION "${nws}"; then
        test "${J_VERBOSE}" = 1 && Report_info "Repeating ${nws}"
        export ACTION='repeat'
        if [[ ${J_NOSCRIPT} == 0 ]]; then
          # shellcheck disable=SC1090
          source "${nws}" --repeat
        fi
        cws="${nws}"
      else
        Report_warning "${nws} does not contain ACTION"
      fi
    fi
  fi
  TMP1="$(pwd)"
  if command -v set_title 1>/dev/null; then
    set_title "${TMP1}"
  fi
  TMP2="$(basename "${TMP1}")"
  if command -v set_icon 1>/dev/null; then
    set_icon "${TMP2}"
  fi

}

