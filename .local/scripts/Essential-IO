#!/usr/bin/env bash
#
# Essential I/O functions for logging messages of all types including informational, warnings, errors, fatal

export Essential_IO_VERSION=1.2

#| FUNCTION SYNTAX               | DESCRIPTION 
#| :---------------------------- | :---------- 
#| Color-Setup ON_or_OFF         | Enables color variables (e.g., CBLU)
#| Comment "_MESSAGE_"           | Does nothing but provide NOP comment
#| Debug "_MESSAGE_"             | Echo a debug message
#| Die "_MESSAGE_"               | Echo a fatal message and exit with fail
#| _do _COMMAND_                 | Displays and executes a command
#| Echo [-n] "_MESSAGE_"         | Displays and logs message
#| Error "_MESSAGE_"             | Echo an error message
#| Errors                        | Display number of errors
#| Fail                          | Sets error status (1)
#| HelpText [-md] "$0"           | Displays help for specified file
#| Info "_MESSAGE_"              | Echo an informational message
#| Log [-n] "_MESSAGE_"          | Adds message to logfile
#| Logfile [--append] _FILE_     | Establishes a logfile name
#| Pass                          | Sets success status (0)
#| PassFail "_MESSAGE_"          | Displays message with pass/fail status
#| Realpath FILESPEC             | Echo the real pathname for a file specification
#| Reset-errors                  | Reset error and warning counts to zero
#| Ruler [-CLR] [_MESSAGE_]      | Echo a ruler with option embedded message
#| ShowVars VARLIST              | Echo values of variables
#| Summary PROG ["_MESSAGE_"]    | Echo a summary of errors and warnings
#| Usage [-h] "_MESG_" || return | Echo syntax if first option is -h and return false
#| Warn "_MESSAGE_"              | Echo a warning message
#| Warnings                      | Display number of errors

function Comment()
{
  # Allow and ignore all arguments
  true;
}

function Realpath()
{
  #@ Output the realpath name treating all arguments as a single filename specification
  #| Realpath FILENAME_SPECIFICATION
  /usr/bin/perl '-MCwd(abs_path)' -le '$p=abs_path(join(q( ),@ARGV));print $p if -e $p' "$*"
}

function Color-Setup()
{
  #@ Setup variables used to create color (or not)
  #| Color-Setup [off|on|bright]
  local USE_COLOR ESC
  USE_COLOR=1 ;# Default ON
  ESC=""
  case "$*" in
    off|OFF|no|NO|none|NONE) USE_COLOR=0;;
    bold|bright) USE_COLOR=10;;
    on|ON|yes|YES) USE_COLOR=2;;
    *) echo "WARNING: Unknown color setting - using default" 1>&2;;
  esac
  if [[ -n ${NOCOLOR+x} ]]; then
    USE_COLOR=0;
  fi
  if [[ ${USE_COLOR} == 10 ]]; then
    # shellcheck disable=SC2034
    BOLD="${ESC}[01m" UBLD="${ESC}[21m"
    DARK="${ESC}[02m" UDRK="${ESC}[22m"
    UNDR="${ESC}[04m" UNUN="${ESC}[24m"
    INVS="${ESC}[07m" UNVS="${ESC}[27m"
    CBLK="${ESC}[90m" NONE="${ESC}[00m"
    CRED="${ESC}[91m" 
    CGRN="${ESC}[92m" 
    CYLW="${ESC}[93m" 
    CBLU="${ESC}[94m" 
    CMAG="${ESC}[95m" 
    CCYN="${ESC}[96m" 
    CWHT="${ESC}[97m" 
    BBLK="${ESC}[100m"
    BRED="${ESC}[101m"
    BGRN="${ESC}[102m"
    BYLW="${ESC}[103m"
    BBLU="${ESC}[104m"
    BMAG="${ESC}[105m"
    BCYN="${ESC}[106m"
    BWHT="${ESC}[107m"
  elif [[ ${USE_COLOR} -gt 0 ]]; then
    # shellcheck disable=SC2034
    ESC=""
    BOLD="${ESC}[01m" UBLD="${ESC}[21m"
    DARK="${ESC}[02m" UDRK="${ESC}[22m"
    UNDR="${ESC}[04m" UNUN="${ESC}[24m"
    INVS="${ESC}[07m" UNVS="${ESC}[27m"
    CBLK="${ESC}[30m" NONE="${ESC}[00m"
    CRED="${ESC}[31m"
    CGRN="${ESC}[32m"
    CYLW="${ESC}[33m"
    CBLU="${ESC}[34m"
    CMAG="${ESC}[35m"
    CCYN="${ESC}[36m"
    CWHT="${ESC}[37m"
    BBLK="${ESC}[40m"
    BRED="${ESC}[41m"
    BGRN="${ESC}[42m"
    BYLW="${ESC}[43m"
    BBLU="${ESC}[44m"
    BMAG="${ESC}[45m"
    BCYN="${ESC}[46m"
    BWHT="${ESC}[47m"
  else
    # shellcheck disable=SC2034
    NONE=""
    BOLD="" UBLD=""
    DARK="" UDRK=""
    INVS="" UNVS=""
    UNDR="" UNUN=""
    CBLK=""
    CRED=""
    CGRN=""
    CYLW=""
    CBLU=""
    CMAG=""
    CCYN=""
    CWHT=""
    BBLK=""
    BRED=""
    BGRN=""
    BYLW=""
    BBLU=""
    BMAG=""
    BCYN=""
    BWHT=""
  fi
  export NONE BOLD UBLD UNDR UNUN DARK UDRK INVS UNVS CBLK CRED CGRN CYLW CBLU CMAG CCYN CWHT BBLK BRED BGRN BYLW BBLU BMAG BCYN BWHT
}
Color-Setup on

function Logfile()
{
  #@ Logfile - Display, establish or close the logfile
  #| Logfile
  #| Logfile [--append|-a] FILENAME
  #| Logfile --off
  #| Logfile ""
  if [[ $# == 0 ]]; then
    if [[ -z "${LOGFILE}" ]]; then
      Info "Not currently logging"
    else
      Info "Logging to ${LOGFILE}"
    fi
    return
  fi
  if [[ "$1" =~ ^-{1,2}(off)? ]]; then
    LOGFILE=""
    return
  fi
  local APPEND PREV_LOGFILE
  APPEND=0
  if [[ "$1" =~ ^-{1,2}a(ppend)?$ ]]; then
    APPEND=1
    shift
  fi
  if [[ -n ${LOGFILE} ]]; then PREV_LOGFILE="${LOGFILE}"; else PREV_LOGFILE=""; fi
  LOGFILE=""
  if [[ $# -gt 0 && -z "${LOGFILE}" ]]; then
    # Figure out where to store logfile
    if [[ "${LOGFILE}" =~ ^/ ]]; then
      LOGFILE=""
    elif [[ -n "${LOGDIR}" ]]; then
      if [[ ! -d "${LOGDIR}" ]]; then mkdir -p "${LOGDIR}"; fi
      LOGFILE="$(Realpath "${LOGDIR}")/"
    else
      LOGFILE="$(Realpath .)/"
    fi
    # Append the filename ensuring suffix is .log
    LOGFILE="${LOGFILE}${1//.log/}.log"
  fi
  if [[ -n "${PREV_LOGFILE}" && "${PREV_LOGFILE}" != "${LOGFILE}" ]]; then
    builtin printf "\n# Closed %s\n" "$(date)" >> "${PREV_LOGFILE}"
    builtin printf "Closed %s\n" "${PREV_LOGFILE}"
  elif [[ -z "${LOGFILE}" ]]; then
    builtin echo "Error: Must specify a valid logfile name" 1>&2
    exit 1
  fi
  if [[ -n "${LOGFILE}" ]]; then
    test "${APPEND}" -eq 0 && rm -f "${LOGFILE}"
    builtin printf "# Logfile for %s created on %s\n\n" "$1" "$(date)" >> "${LOGFILE}"
    builtin printf "Logging to %s\n" "${LOGFILE}"
  fi
}

function Log()
{
  #@ Send text to current logfile if $LOGFILE is defined
  #| Log [-n] "MESSAGE"
  #| COMMAND | Log
  if [[ -z "${LOGFILE}" ]]; then return; fi
  if [[ "${SHELL}" == /bin/zsh ]]; then
    set -o shwordsplit
  fi
  local OPT
  if [[ "$1" == "-n" ]]; then OPT="$1"; shift; fi
  if [[ $# == 0 ]]; then # pipe
    if [[ -f "${LOGFILE}" ]]; then tee -a "${LOGFILE}"; else cat >"${LOGFILE}"; fi
  else
    if [[ -f "${LOGFILE}" ]]; then
      if [[ "${OPT}" == "-n" ]]; then
        builtin echo -n "$@" >>"${LOGFILE}";
      else
        builtin echo    "$@" >>"${LOGFILE}";
      fi
    fi
  fi
}

function Echo()
{
  #@ Echo text, but also sends to Log
  #| Echo [-n] TEXT
  local OPT
  if [[ "$1" == "-n" ]]; then OPT="$1"; shift; fi
  if [[ "${OPT}" == "-n" ]]; then
    builtin echo -n "$*"; Log  -n "$*"
  else
    builtin echo "$*"; Log "$*"
  fi
  }

function Printf()
{
  #@ Printf with logging
  if [[ "${SHELL}" == /bin/zsh ]]; then
    set -o shwordsplit
  fi
  local TEXT
  # shellcheck disable=SC2059
  TEXT="$(builtin printf "$@")"
  builtin echo "${TEXT}"; Log "${TEXT}"
}

function _do()
{
  #@ Echo and then execute arguments as a command
  #| _do COMMAND [ARGS]
  local NX
  if [[ -n "${NOTREALLY}" ]]; then NX="-"; fi
  if [[ "$1" == "-n" ]]; then NX="-"; shift; fi
  if [[ "${NX}" == "-" ]]; then
    Echo "${CBLU}${NX}%${NONE} $*"
    return;
  else
    Echo "${CCYN}${NX}%${NONE} ${BOLD}$*${NONE}"
  fi
  if [[ "${SHELL}" == /bin/zsh ]]; then
    set -o shwordsplit
  fi
  "$@"
}

function Fail()
{
  return 1
}

function Pass()
{
  return 0
}

function Info()
{
  #@ Echo tagged informational message (i.e., SC_REPORT_INFO) - logged
  #| Info [-tag TAG ][-(red|grn|blu|ylw|cyn|mag)] MESSAGE
  if [[ -n "${VERBOSITY+x}" || "${VERBOSITY}" -lt 0 ]]; then
    return 0
  fi
  local PRE TAG
  PRE="${NONE}"
  TAG="Info: "
  while [[ "$1" =~ ^-[[:alpha:]]{3}$ ]]; do
    case "$1" in
      -pre) PRE="${2}"    ; shift  ; shift ;;
      -cyn) PRE="${CCYN}" ; shift ;;
      -red) PRE="${CRED}" ; shift ;;
      -grn) PRE="${CGRN}" ; shift ;;
      -ylw) PRE="${CYLW}" ; shift ;;
      -blu) PRE="${CBLU}" ; shift ;;
      -mag) PRE="${CMAG}" ; shift ;;
      -wht) PRE="${CWHT}" ; shift ;;
      -tag) TAG="${2}";
            if [[ "${#TAG}" -gt 1 ]]; then TAG="${TAG}:" ; fi
            if [[ "${#TAG}" -gt 0 ]]; then TAG="${TAG} " ; fi
            shift ; shift ;;
      *) PRE="${NONE}" ;;
    esac
  done
  Echo "${CGRN}${BOLD}${TAG}${UBLD}${PRE}$*${NONE}"
}

function PassFail()
{ # Reports success or failure
  # shellcheck disable=SC2181
  local STATUS
  STATUS="$?"
  if [[ $# == 0 ]]; then
    if [[ ${STATUS} == 0 ]]; then Info "${BOLD}${CGRN}success${NONE}"; else Info "${BOLD}${CRED}failure${NONE}"; fi
  else
    if [[ ${STATUS} == 0 ]]; then Info "$* ${BOLD}${CGRN}success${NONE}"; else Info "$* ${BOLD}${CRED}failure${NONE}"; fi
  fi
}

function Debug()
{
  #@ Echo tagged debug message iff debugging (i.e., $DEBUG defined and non-zero)
  #| Debug MESSAGE
  if [[ "$1" == "-f" || -n "${DEBUG}" && "${DEBUG}" != 0 ]]; then
    if [[ "${SHELL}" == /bin/zsh ]]; then
      set -o shwordsplit
    fi
    if [[ "$1" == "-f" ]]; then shift; fi
    if [[ "$1" =~ % ]]; then
      local FMT
      FMT="$1"
      shift
      Printf "${CRED}Debug: ${NONE}${FMT}${NONE}" "$@"
    else
      Echo "${CRED}Debug: ${NONE}$*${NONE}"
    fi
  fi
}

function Debug-on()
{
  export DEBUG
  DEBUG="-f"
}

function Debug-off()
{
  export DEBUG
  DEBUG=""
}

function Ruler()
{
  local ARGS SEP MAX LIN WID
  SEP="-" # Default
  MAX=80 # TODO: Change to match terminal width
  local PRE
  PRE=""
  # Test for color prefix
  case "$1" in
    -pre) PRE="${2}"    ; shift  ; shift ;;
    -cyn) PRE="${CCYN}" ; shift ;;
    -red) PRE="${CRED}" ; shift ;;
    -grn) PRE="${CGRN}" ; shift ;;
    -ylw) PRE="${CYLW}" ; shift ;;
    -blu) PRE="${CBLU}" ; shift ;;
    *) PRE="" ;;
  esac
  Printf "%s" "${PRE}"
  # Grab separator
  if [[ $# -gt 0 && "${#1}" == 1 ]]; then
    SEP="$1"
    shift
  fi
  ARGS="$*"
  if [[ $# != 0 ]]; then
    WID=${#ARGS}
    MAX=$(( MAX - WID - 4 ))
  fi
  LIN="$(/usr/bin/perl -le 'my ($w,$s)=@ARGV;printf(qq{%${w}.${w}s},${s}x${w})' "${MAX}" "${SEP}")"
  if [[ $# == 0 ]]; then
    Printf "%s%s\n" "${LIN}" "${NONE}"
  else
    Printf "%s%s %s %s%s\n" "${SEP}" "${SEP}" "${ARGS}" "${LIN}" "${NONE}"
  fi
}

# Ensure that error messages are clearly seen
function Die()
{
  Echo -n "${CRED}"
  Ruler '!'
  Echo "${CRED}${BOLD}Fatal:${UBLD} $*${NONE}" 1>&2
  exit 1
}
alias Fatal=Die

function Assert()
{
  #@ Similar to sc_assert
  if [[ -z "${NDEBUG}" ]]; then return; fi
  if [[ "${SHELL}" == /bin/zsh ]]; then
    set -o shwordsplit
  fi
  # shellcheck disable=SC218
  test "$@" && return
  local FNC FIL LNO
  FNC="${FUNCNAME[1]}"
  FIL="${BASH_SOURCE[1]}"
  LNO="${BASH_LINENO[0]}"
  Die "Failed assertion '$*' from ${FNC} in ${FIL}:${LNO}"
}

function Error()
{
  #@ Echo tagged error message (i.e., SC_REPORT_ERROR) - logged and counted
  #| Error MESSAGE
  if [[ -z "${ERRORS}" ]]; then ERRORS=0; fi
  (( ++ERRORS ))
  export ERRORS
  Echo -n "${CRED}"
  Ruler '!'
  Echo "${CRED}${BOLD}Error #${ERRORS}:${UBLD} ${NONE}$*${NONE}" 1>&2
}

function Warn()
{
  #@ Echo tagged warning message (i.e., SC_REPORT_WARNING) - logged and counted
  #| Error MESSAGE
  if [[ -z "${WARNINGS}" ]]; then WARNINGS=0; fi
  (( ++WARNINGS ))
  export WARNINGS
  Echo -n "${CRED}"
  Ruler '?'
  Echo "${CRED}${BOLD}Warning:${UBLD} ${NONE}$*${NONE}" 1>&2
}

export ERRORS WARNINGS

function Reset-errors()
{
  ERRORS=0
  WARNINGS=0
}

function Errors()
{
  if [[ -z "${ERRORS}" ]]; then ERRORS=0; fi
  echo "${ERRORS}";
}

function Warnings()
{
  if [[ -z "${WARNINGS}" ]]; then WARNINGS=0; fi
  echo "${WARNINGS}";
}

function Summary()
{
  Assert $# != 0
  Echo -n "${CMAG}Execution summary for ${1}:"
  shift
  if [[ "$(Warnings)" == 0 ]]; then
    Echo -n " ${CGRN}No warnings"
  else
    Echo -n " ${CRED}$(Warnings) warnings"
  fi
  if [[ "$(Errors)" == 0 ]]; then
    Echo -n "  ${CGRN}No errors"
  else
    Echo -n "  ${CRED}$(Errors) errors"
  fi
  local RESULT
  if [[ "$(Errors)" == 0 ]]; then Echo -n " - ${CGRN}passing"; RESULT=0;
  else                          Echo -n " - ${CRED}failing"; RESULT=1;
  fi
  Echo -n "${NONE}"
  if [[ $# != 0 ]]; then Echo " $*"; fi
  Echo ""
  return "${RESULT}"
}

function Usage()
{
  # Usage: Usage "$1" "{:SYNTAX:}" || return
  if [[ "$1" =~ ^-{1,2}h(elp)? ]]; then shift; echo "Syntax: $*"; return 1; fi
}

function HelpText()
{
  if [[ "${SHELL}" == /bin/zsh ]]; then
    set -o shwordsplit
  fi
  local HELPSCRIPT
  if [[ "$1" == "-md" ]]; then
    shift
    # shellcheck disable=SC2016
    HELPSCRIPT='if (/begin_markdown/../end_markdown/){ next if m/(begin|end)_markdown/; print; }'
  else
    # shellcheck disable=SC2016
    HELPSCRIPT='$p = $ARGV; $p =~ s{.*/}{}; if( $_ =~ s{^ *#\|}{} ){ $_ =~ s{\$0}{$p}; print; }'
  fi
  Assert $# -gt 0
  /usr/bin/perl -ne "${HELPSCRIPT}" "$@";
}

function ShowVars()
{
  if [[ "${SHELL}" == /bin/zsh ]]; then
    set -o shwordsplit
  fi
  local DLR VAR VAL
  for VAR in "$@"; do
    DLR='$'
    VAL="$(eval "echo ${DLR}${VAR}")"
    if [[ -n "${VAL}" ]]; then
      Echo "${VAR}='${VAL}'"
    fi
  done
}

# vim:nospell
