#!/bin/zsh

(return 0 2>/dev/null) && SOURCED=1 || SOURCED=0
if [[ ${SOURCED} == 0 ]]; then
  echo "Don't run $0, source it" >&2
  exit 1
fi
export SHELLNAME=zsh

bindkey -M viins '^[h' run-help
bindkey -M vicmd '^[h' run-help
if ((${+aliases[run-help]})); then
  unalias run-help
fi
autoload -Uz run-help

alias ez='exec zsh'
alias 1p=op
alias db=defaultbrowser

alias Arm='open "${HOME}/Drives/Arm-Training.sparsebundle"; sleep 2; open /Volumes/Arm-Training'

alias 0p='eval $(op signin family_tx512)'
alias Bc='shellcheck -s bash -xa -o all'
alias Clion='jb clion'
alias Rover='jb rust'
alias myip='ipconfig getifaddr en0'
alias font-sample="echo '#=0123456789_=-^+@auvwxy/\B&8b6ijl1|L_?9gqQO0op2Z75S'"
alias ipno='ifconfig|egrep "vmnet|(inet[ ])"'

alias week='date +%W'
alias tab='it tab'
alias flow=git-flow
alias changed='git changed'
alias %=_do
CPU=$(uname -p)
if [[ "${CPU}" == "arm" ]]; then
  alias oldbrew=/usr/local/bin/brew
fi
alias nvim='gvim -ngp'
export VI='gvim'
export LOCAL EDITOR
alias view-systemc='"${EDITOR}" "${LOCAL}/src/systemc/src"'

function ViSrc()
{
  local FILE
  FILE="$(Realpath "$1")"
  shift
  echo "${VI} -f $* ${FILE}"
  "${VI}" -f "$@" "${FILE}"
  if [[ -x "${FILE}" && -f "${FILE}" ]]; then
    echo "source \"${FILE}\""
    # shellcheck disable=SC1090
    source "${FILE}"
  else
    echo 1>&2 "Not executable ${FILE}"
  fi
}

function viscr()
{
  # shellcheck disable=SC2154,SC2312
  ViSrc "$(Firstreal ~/"scripts/$1" "${LOCAL}/scripts/$1")";
}
alias vial='ViSrc ~/.zsh_aliases'
alias vizsh='ViSrc ~/.zshrc'
alias vigit='ViSrc ~/.gitconfig'
alias vissh='ViSrc ~/.ssh/config'
alias vifuncs='ViSrc ~/.zsh_functions'
alias vimrc='ViSrc ~/.vimrc'
alias vienv='ViSrc ~/.zsh_env'
alias viobs='ViSrc ~/OBS/Doulos/.'
alias Exit="osascript -e 'tell application \"iTerm2\" to quit'; exit"
alias .alias='. ~/.zsh_aliases'
alias .zsh='. ~/.zshrc'
alias .env='. ~/.zsh_env'
alias .funcs='. ~/.zsh_functions'
alias aliases='alias | perl -pe "s/alias //;s/=.*//" | fmt'

function funcs()
{
  # shellcheck disable=SC2312
  declare -f | perl -lane 'next unless m-^[[:alpha:]]{2,} *\(\) ?[\{]-;print $F[0]' | fmt
}
function aga()
{
  ag 2>/dev/null -a -u --hidden "$@" || true
}
function agl()
{
  ag 2>/dev/null -l --nocolor "$@" | sort || true
}
function agL()
{
  ag 2>/dev/null -L --nocolor "$@" | sort || true
}
alias ag0='ag --depth=0'
alias ag1='ag --depth=0'
alias ag.='ag --depth=0 --hidden'
function agh()
{
  ag -t -s -w --hidden --depth 1 "$@"
}

function read_into_array() {
  # Usage: read_into_array ARRAY "COMMAND"
    local arr_name=$1
    local cmd="$2"

    eval "${arr_name}=()"
    # shellcheck disable=SC2312
    while IFS= read -r line; do
        eval "${arr_name}+=(\"${line}\")"
    done < <(eval "${cmd}")
}

function ssh2openssh()
{
  if [[ "$*" =~ ^-{1,2}h(elp)?$ ]]; then
    echo "
NAME
----

ssh2openssh - convert multiple line ssh2 public key to single line openssh format

SYNOPSIS
--------

ssh2openssh [KEYPATH/]KEYFILE

"
    return 0
  fi
  if [[ $# != 1 ]]; then
    Report_warning "Syntax requires specifying an ssh key"
    return 1
  fi
  local f
  if [[ "${f}" =~ .pub$ ]]; then
    f="${1/.pub}"
  else
    f="${1}"
  fi
  if [[ "${f}" =~ / ]]; then
    if [[ ! -r "${f}.pub" ]]; then
      Report_error "Missing '${f}.pub'"
      return 1
    fi
  else
    if [[ ! -r "${f}.pub" ]]; then
      f="${HOME}/.ssh/${f}"
    fi
    if [[ ! -r "${f}.pub" ]]; then
      Report_error "Missing '${f}.pub'"
      return 1
    fi
  fi
  local n=0
  n="$(wc -l "${f}.pub")"
  if [[ ${n} -gt 1 ]]; then
    ssh-keygen -i -f "${f}.pub" > "${f}-openssh.pub"
  else
    Report_warning "'${f}.pub' is already a single line - skipping"
    return 1
  fi
}

alias threagile='docker run --rm -it -v "$(pwd)":/app/work threagile/threagile'

function new() 
{
  NEWEST=~"/.newest"
  local e=0
  if [[ $# == 0 ]]; then
    # shellcheck disable=SC2154
    "${LOCAL}/bin/new"
  fi
  if [[ "$1" == "-e" ]]; then
    e=1
    shift
  fi
  if [[ $# -gt 0 ]]; then
    rm -f "${NEWEST}"
    if [[ ! ( "$*" =~ -[Pq] ) ]]; then
      echo "${LOCAL}/bin/new" "$@"
    fi
    # shellcheck disable=SC2312
    "${LOCAL}/bin/new" "$@" | tee "${NEWEST}"
  fi
  if [[ "${e}" == "1" && -r "${NEWEST}" ]]; then
    NEWF=$(perl -lane 'print $1 if m/^Created "([^"]+)"/'  "${NEWEST}")
    if [[ -r "${NEWF}" && ! -d "${NEWF}" ]]; then
      gvim -f "${NEWF}"
    fi
  fi
}


#PS1='\[\e[1;`pws2`m\]\s-\h(`uname`):`pwd2` \!%\[\e[0m\] '
#PS2='\[\e[1;`pws2`m\]\!>\[\e[0m\] '
#PS1='\u@\h:\w$(__git_ps1 " (%s)") $ '
#PROMPT_DIRTRIM=2
#-------------------------------------------------------------------------------
function Columns()
{
  # shellcheck disable=SC2312
  stty -a | /usr/bin/perl -lne 'if((m{columns ([[:digit:]]+)})or(m{([[:digit:]]+) columns})){print $1;last}'
}
alias Cols=Columns

#-------------------------------------------------------------------------------
function Rows()
{
  # shellcheck disable=SC2312
  stty -a | /usr/bin/perl -lne 'if((m{rows ([[:digit:]]+)})or(m{([[:digit:]]+) rows})){print $1;last}'
}
alias Lines=Rows
#-------------------------------------------------------------------------------
alias sane='reset; stty erase ^H'
function hclr()
{
  cat /dev/null >~/"saved$1.history";
}
#-------------------------------------------------------------------------------
function hput()
{
  history -a >~/"saved$1.history";
}
function hget()
{
  history -n >~/"saved$1.history";
}
function hreduce()
{
  hunique -o ~/"saved$1.history";
}
#-------------------------------------------------------------------------------
function Ps()
{
  ps -p $$
}

function m()
{
  if [[ "$1" == '-nc' ]]; then
    env NOCOLOR=1 less "$@"
  else
    less "$@"
  fi
}
#-------------------------------------------------------------------------------
alias Find='find 2>/dev/null'
alias W='command -V';
function WL()
{
  # Returns the path of a file reported by command -V
  # shellcheck disable=SC2312
  command -V "$@" | perl -lane 'print $F[$#F];' ;
}
function f()
{
  # Returns the path of a j(ump) command
  ( j "$@" ; realpath "${!#}" );
}
alias F='file'
alias I='lipo -info'
alias info='info --vi-keys'
export CLEAR_EXE
CLEAR_EXE="$(FindExe clear '/opt/local/bin/clear' /usr/bin/clear /bin/clear)"
alias clear='${CLEAR_EXE} -x'
alias cls='clear; '
alias .bashrc='. ~/.bashrc';
function UserInit()
{
  case $# in
    0) Report_Error "Must supply username" ; return 1 ;;
    1) if [[ "$1" =~ ^-{1,2}h(elp)?$ ]]; then Report_info "Syntax: $0 USERNAME"; return 0; fi ;;
    *) Report_Error "Too many arguments" ; return 1 ;;
  esac
  local D F U="$1"
  for F in "${U}.bash" "setup.${U}"; do
    for D in "${HOME}" "${HOME}/bin"; do
      if [[ -x "${D}/${F}" ]]; then
        # shellcheck disable=SC1090
        source "${D}/${F}"
      fi
    done
  done
}
alias dcblack='UserInit dcblack'

alias 7za='7za a -t7z -m0=lzma -mx=9 -mfb=64 -md=32m -ms=on'

export LS_OPTS=-bhCF
export TREE_OPTS="-ACF --gitignore"
# shellcheck disable=SC2312
if [[ "$(uname -s)" == "Darwin" ]]; then
  # Macintosh specific
  alias msword="open -a 'Microsoft Word'"
  alias excel="open -a 'Microsoft Excel'"
  alias powerpoint="open -a 'Microsoft PowerPoint'"
  alias parallels="open -a 'Parallels Desktop'"
  alias eclipse="open -a eclipse"
  alias gls='/usr/local/bin/gls ${LS_OPTS} --color';
  alias ls='ls ${LS_OPTS}G';
  alias la='ls ${LS_OPTS}AG';
  export LSUSB='/usr/local/bin/lsusb'
  export GREP='/usr/bin/grep'
# alias make='gmake';
# alias gdb='lldb'
else
  alias ls='ls -bCF --color';
  alias la='ls ${LS_OPTS}A --color';
  alias make='make';
fi
alias tree='tree ${TREE_OPTS}';
alias st='set_title';
alias echoln='perl -e '"'"'printf qq{%s\n},join(qq{\n},@ARGV);'"'"

alias pushbw='pushd +1'
alias pushfw='pushd -0'
alias unsetenv="unset"
for n in 80 100 120 140 160; do
  # shellcheck disable=SC2139,SC2140
  alias "${n}"="ruler -n ${n}"
done
alias Mktree='mkdir -p a a/b1 a/b2 a/bin; touch a/b3.txt a/b1/c1.txt a/b1/c2.txt a/b2/c3.txt a/bin/dummy; chmod a+rx a/bin/dummy'
alias Mkvar='export A=a/bin:a/b1:a:a/b2:a/b1:a/b2/c3.txt:a:a/bin:a/bin/dummy'

function serialize()
{
  for var in "$@"; do
    typeset -p "${var}" > "./serialized_${var}.sh"
  done
}

# function deserialize()
# {
#   declare() { builtin declare -g "$@"; }
#   typeset() { builtin typeset -g "$@"; }
#   for var in "$@"; do
#     # shellcheck disable=SC1090
#     source "./serialized_${var}.sh"
#   done
#   unset -f declare typeset
# }

#EOF ~/.bash_aliases vim:nospell
