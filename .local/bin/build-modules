#!/usr/bin/env bash
#
# Script to build/install modules, an aid to managing environment variables.
if [[ "$!" =~ ^-{1,2}h(elp)?$ ]]; then
  cat <<'HELPTEXT'
Name
----
build-modules - Install the modules package.

Synopsis
--------
build-modules --help|-h # produces this text
build-modules

Description
-----------
Installs the [modules package](https://github.com/cea-hpc/modules#readme), a utitilty for dynamic modification of environment variables.

IMPORTANT
---------
Must be run inside project git repository.

HELPTEXT
  exit 0;
fi


TOOL_NAME="Modules"
# shellcheck disable=SC2089
TOOL_INFO="Use 'module --help' for more information."
TOOL_SRC="modules"
TOOL_URL="https://github.com/cea-hpc/modules.git"

function Realpath() {
  if [[ $# == 0 ]]; then set - .; fi
  /usr/bin/perl '-MCwd(abs_path)' -le '$p=abs_path(join(q( ),@ARGV));print $p if -e $p' "$*"
}

SCRIPT="$(Realpath "$0")"
SCRIPT="$(dirname "${SCRIPT}")/utils.bash"
if [[ -x "${SCRIPT}" ]]; then
  # shellcheck source=utils.bash
  source "${SCRIPT}" "$0"
else
  echo "Error: Missing ${SCRIPT}" 1>&2; exit 1
fi
SetupLogdir "$0"

GetBuildOpts "$0" "$@"
ConfirmBuildOpts || exit

Create_and_Cd "${SRC}"
GetSource_and_Cd "${TOOL_SRC}" "${TOOL_URL}"

Report_info "Configuring ${TOOL_NAME}"
Generate autotools
make

Report_info "Installing ${TOOL_NAME}"
_do make install | Log

Summary "${TOOL_NAME}" "Installed. ${TOOL_INFO}"

Cleanup_Source "${TOOL_SRC}"
