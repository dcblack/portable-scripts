#!/usr/bin/env bash
#
#$Info: mkgenerated - Mark a directory with a file to indicate the contents are generated. $

(return 0 2>/dev/null) && SOURCED=1 || SOURCED=0

if [[ "$1" =~ ^-{1,2}h(elp)?$ ]]; then
  cat <<'HELPTEXT'
Name
----

mkgenerated - Mark a directory with a file to indicate the contents are generated.

Synopsis
--------

mkgenerated --help|-h # produces this text
mkgenerated DIRECTORY_PATH...

Description
-----------

Mark the specified directory by creating a file named ABOUT_GENERATED_CONTENTS to indicate that all contained files are generated by tools. In other words, none of the files are to be considered source, and most likely do not need to be version controlled.

The ABOUT_GENERATED_CONTENTS file contains a simple statement and timestamp.

More that one directory may be specified, which will result in multiple marked directories.

HELPTEXT
  exit 0;
fi

function Realpath ()
{
  /usr/bin/perl '-MCwd(abs_path)' -le '$p=abs_path(join(q( ),@ARGV));print $p if -e $p' "$*"
}

function Mkgenerated()
{
  local ABOUT_FILENAME="ABOUT_GENERATED_CONTENTS"
  local TIME_STAMP
  TIME_STAMP="$(date '%Y-%m-%d %H:%M:%S')"
  local ABOUT_CONTENTS="
Description
-----------

This directory contains generated files (i.e., not source). **Do not modify!**

[Timestamp: ${TIME_STAMP}]
"

  local SCRIPTDIR SCRIPT
  local -a REQUIRED=( Essential-IO Essential-manip )
  SCRIPTDIR="$(Realpath "$(dirname "$0")"/../scripts)"
  if [[ ! -r "${SCRIPTDIR}/${REQUIRED[0]}" ]]; then
    SCRIPTDIR="$(Realpath "${HOME}"/.local/scripts)"
  fi
  if [[ ! -r "${SCRIPTDIR}/${REQUIRED[0]}" ]]; then
    SCRIPTDIR="$(Realpath "$(dirname "$0")")"
  fi
  for SCRIPT in "${REQUIRED[@]}"; do
    if [[ ! -r "${SCRIPTDIR}/${SCRIPT}" ]]; then
      printf "FATAL: Missing required source file '%s'\n" "${SCRIPTDIR}/${SCRIPT}"
      return 1
    fi
    # shellcheck disable=SC1090,SC2250,SC1091
    source "$SCRIPTDIR/$SCRIPT"
  done

  for DIR_PATHNAME in "$@"; do
    if [[ -f "${DIR_PATHNAME}" && ! -d "${DIR_PATHNAME}" ]]; then
      echo "Warning: Skipping ${DIR_PATHNAME} because it is not a directory" 1>&2
      continue
    fi
    if [[ -f "${DIR_PATHNAME}" ]]; then
      echo "Info: Creating ${DIR_PATHNAME}"
    fi
    mkdir -p "${DIR_PATHNAME}"
    local ABOUT_PATHNAME="${DIR_PATHNAME}/${ABOUT_FILENAME}"
    if [[ -e "${ABOUT_PATHNAME}" ]]; then
      echo "Info: Updating ${ABOUT_PATHNAME}"
    else
      echo "Info: Creating ${ABOUT_PATHNAME}"
    fi
    echo >"${ABOUT_PATHNAME}" "${ABOUT_CONTENTS}"
  done
}

if [[ ${SOURCED} == 0 ]]; then
  Mkgenerated "$@"
fi
