#!/bin/bash

SCRIPT="$(dirname "$0")/reporting.bash"
if [[ -r "${SCRIPT}" ]]; then
  # shellcheck source=reporting.bash
  source "${SCRIPT}" "$0"
else
  echo "Error: Missing ${SCRIPT}" 1>&2; exit 1
fi
#-------------------------------------------------------------------------------
function Get_name() {
  YOURNAME=""
  while [[ "${YOURNAME}" == "" ]]; do
    read -r -p 'Your full name: '
    if [[ "${REPLY}" =~ [A-Za-z][-A-Za-z]+(\ [-A-Za-z]+)+ ]]; then
      YOURNAME="${REPLY}"
    elif [[ "${REPLY}" =~ quit|exit|abort ]]; then
      return
    else
      Error "Improperly formatted name"
    fi
  done
}

#-------------------------------------------------------------------------------
function Get_email() {
  YOURMAIL=""
  while [[ "${YOURMAIL}" == "" ]]; do
    read -r -p 'Your email address: '
    if [[ "${REPLY}" =~ [-.a-zA-Z0-9]+@[-.a-zA-Z0-9]+[.][a-zA-Z]{3} ]]; then
      YOURMAIL="${REPLY}"
    elif [[ "${REPLY}" =~ quit|exit|abort ]]; then
      return
    else
      Error "ERROR: Improperly formatted e-mail address" 1>&2
    fi
  done
}

function choose() { # QUESTION CHOICES...
  if [[ $# -lt 3 ]]; then
    echo "Error: Must have a question and at least two choices." 1>&2
    exit 1
  fi
  local question choices
  question="$1"
  shift
  choices="${*// /|/}"
  ANS=""
  
  while [[ "${ANS}" == "" ]]; do
    read -r -p "${question}\nChoose action: (${choices}): "
    if [[ "${REPLY}" =~ ${choices} ]]; then
      ANS="${REPLY}"
    fi
  done
  if [[ "${ANS}" =~ quit|abort ]]; then exit 0; fi
  echo "${ANS}"
}

#-------------------------------------------------------------------------------
# Main
#-------------------------------------------------------------------------------
function Git_setup() {
  GITCFG="${HOME}/.gitconfig"
  YOURNAME=""
  YOURMAIL=""
  FORCE=0
  while [[ $# -gt 0 ]]; do
    if [[ "$1" =~ ^-{1,2}n(ame)?$  && $# -gt 1 ]]; then YOURNAME="$2"; shift; fi
    if [[ "$1" =~ ^-{1,2}e(mail)?$ && $# -gt 1 ]]; then YOURMAIL="$2"; shift; fi
    if [[ "$1" =~ ^-{1,2}f(orce)?$ && $# -gt 1 ]]; then FORCE=1; fi
    shift
  done

  if [[ ! -f "${GITCFG}" ]]; then

    if test "${FORCE}" -eq 1 -o -z "$(git config --global user.name)"; then
      Get_name
      git config --global user.name "${YOURNAME}"
      printf "Setup user.name=%s\n" "${YOURNAME}"
    else
      printf "Leaving user.name=%s\n" "${YOURNAME}"
    fi
    if test "${FORCE}" -eq 1 -o -z "$(git config --global user.email)"; then
      Get_email
      git config --global user.email "${YOURMAIL}"
      printf "Setup user.email=%s\n" "${YOURMAIL}"
    else
      printf "Leaving user.email=%s\n" "${YOURMAIL}"
    fi

    git config --global push.followTags true
    git config --global color.pager true
    git config --global color.ui auto
    git config --global core.pager "less -FRSX"
    git config --global push.default current

    # Useful aliases
    git config --global alias.changes  'status -s -uno'
    git config --global alias.changed  'ls-files -m'
    git config --global alias.tags     'tag -l'
    git config --global alias.unstage  'reset HEAD'
    git config --global alias.untrack  'rm --cached'
    git config --global alias.hash     'hash-object'
    git config --global alias.branches 'log --pretty=format:'%h %s' --graph'
    git config --global alias.ignored  'ls-files -i'
    git config --global alias.co       'checkout'
 
  fi

  for COURSE in syscfund tlm-2; do
    if [[ -d "${HOME}/${COURSE}" && ! -d "${HOME}/${COURSE}/.git" ]]; then
      cd "${HOME}/${COURSE}" || Die "Unable to change into ${HOME}/${COURSE}"
      git init .
      git add .
      git commit -m 'initial'
    fi
  done

  Info "Git set up"
}

Git_setup "$@"

#-------------------------------------------------------------------------------
