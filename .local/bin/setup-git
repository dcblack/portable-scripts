#!/usr/bin/env bash

function Realpath()
{
  /usr/bin/perl '-MCwd(abs_path)' -le '$p=abs_path(join(q( ),@ARGV));print $p if -e $p' "$*"
}
SCRIPT="$(Realpath "$0")"
SCRIPT="$(dirname "${SCRIPT}")/utils.bash"
if [[ -r "${SCRIPT}" ]]; then
  # shellcheck source=~/.local/bin/utils.bash disable=SC1090
  source "${SCRIPT}" "$0"
else
  echo "Error: Missing ${SCRIPT}" 1>&2; exit 1
fi

#-------------------------------------------------------------------------------
function Read()
{
  export REPLY SHELL
  local PROMPT
  PROMPT="$*"
  if [[ ! ( "${PROMPT}" =~ [:?]$ ) ]]; then
    PROMPT="${PROMPT}?"
  fi
  if [[ "${SHELL}" == /bin/zsh ]]; then
    read -r "REPLY?${PROMPT} "
  else
    read -r -p "${PROMPT} "
  fi
}

#-------------------------------------------------------------------------------
function Valid_name()
{
  if [[ "$1" =~ [A-Za-z][-A-Za-z]+(\ [-A-Za-z]+)+ ]]; then
    return 0;
  else
    return 1;
  fi
}

#-------------------------------------------------------------------------------
function Get_name()
{
  export YOURNAME
  YOURNAME=""
  while [[ "${YOURNAME}" == "" ]]; do
    Read 'Your full name: '
    if Valid_name "${REPLY}"; then
      YOURNAME="${REPLY}"
    elif [[ "${REPLY}" =~ quit|exit|abort ]]; then
      return 1
    else
      Report_warning "Improperly formatted name"
    fi
  done
}

function Valid_email()
{
  if [[ "$1" =~ [-.a-zA-Z0-9]+@[-.a-zA-Z0-9]+[.][a-zA-Z]{3} ]]; then
    return 0;
  else
    return 1;
  fi
}

#-------------------------------------------------------------------------------
function Get_email()
{
  export YOURMAIL
  YOURMAIL=""
  while [[ "${YOURMAIL}" == "" ]]; do
    Read 'Your email address: '
    if Valid_email "${REPLY}"; then
      YOURMAIL="${REPLY}"
    elif [[ "${REPLY}" =~ quit|exit|abort ]]; then
      return
    else
      Report_error "ERROR: Improperly formatted e-mail address" 1>&2
    fi
  done
}

function Choose()
{
  # SYNTAX: Choose "QUESTION" CHOICE1 CHOICE2...
  if [[ $# -lt 3 ]]; then
    echo "Error: Must have a question and at least two choices." 1>&2
    exit 1
  fi
  local question choices
  question="$1"
  shift
  choices="${*// /|/}"
  ANS=""
  
  while [[ "${ANS}" == "" ]]; do
    Read "${question}\nChoose action: (${choices}): "
    if [[ "${REPLY}" =~ ${choices} ]]; then
      ANS="${REPLY}"
    fi
  done
  if [[ "${ANS}" =~ quit|abort ]]; then exit 0; fi
  echo "${ANS}"
}

#-------------------------------------------------------------------------------
# Main
#-------------------------------------------------------------------------------
function Git_setup()
{
  # SYNTAX: Git_setup [OPTIONS]
  # OPTIONS:
  #   --name  NAME
  #   --email ADDR
  #   --force
  YOURNAME=""
  YOURMAIL=""
  FORCE=0
  while [[ $# -gt 0 ]]; do
    if [[ "$1" =~ ^-{1,2}n(ame)?$  && $# -gt 1 ]]; then
      if Valid_name "$2"; then
        YOURNAME="$2";
        shift;
      else
        Report_error "Name is not valid. Use 'First Last'"
      fi
    fi
    if [[ "$1" =~ ^-{1,2}e(mail)?$ && $# -gt 1 ]]; then
      if Valid_email "$2"; then
        YOURMAIL="$2";
        shift;
      else
        Report_error "Email address is not valid. Use 'first@domain'"
      fi
    fi
    if [[ "$1" =~ ^-{1,2}f(orce)?$ && $# -gt 1 ]]; then
      FORCE=1;
    fi
    shift
  done

  local GIT_USERNAME
  GIT_USERNAME="$(git config --global user.name)"
  if [[ ${FORCE} == 1 || -z "${GIT_USER_NAME}" ]]; then
    if Get_name; then
      git config --global user.name "${YOURNAME}"
      printf "Setup user.name=%s\n" "${YOURNAME}"
    else
      echo "Aborting..."
      return 1
    fi
  else
    printf "Leaving user.name=%s\n" "${GIT_USERNAME}"
  fi
  local GIT_EMAIL
  GIT_EMAIL="$(git config --global user.email)"
  if [[ ${FORCE} == 1 || -z "${GIT_EMAIL}" ]]; then
    Get_email
    git config --global user.email "${YOURMAIL}"
    printf "Setup user.email=%s\n" "${YOURMAIL}"
  else
    printf "Leaving user.email=%s\n" "${GIT_EMAIL}"
  fi

  git config --global push.followTags true
  git config --global color.pager true
  git config --global color.ui auto
  git config --global core.pager "less -FRSX"
  git config --global push.default current

  # Useful aliases
  git config --global alias.changes  'status -s -uno'
  git config --global alias.changed  'ls-files -m'
  git config --global alias.missed   'ls-files -o --exclude-standard'
  git config --global alias.tags     'tag -l'
  git config --global alias.unstage  'reset HEAD'
  git config --global alias.untrack  'rm --cached'
  git config --global alias.hash     'hash-object'
  git config --global alias.history  'log --pretty=format:"%h %s" --graph'
  git config --global alias.ignored  'ls-files -o'
  git config --global alias.br       'branch'
  git config --global alias.co       'checkout'
  git config --global alias.diffs    '!git diff $(git ls-files -m)'
  git config --global alias.remotes  'remote -v'
  git config --global alias.top 'rev-parse --show-toplevel'
  git config --global alias.url 'remote get-url origin'

  for COURSE in syscfund tlm-2; do
    if [[ -d "${HOME}/${COURSE}" && ! -d "${HOME}/${COURSE}/.git" ]]; then
      cd "${HOME}/${COURSE}" || Die "Unable to change into ${HOME}/${COURSE}"
      git init .
      git add .
      git commit -m 'initial'
    fi
  done

  Report_info "Git set up"
}

if [[ "$*" != "-n" ]]; then
  Git_setup "$@"
fi

#-------------------------------------------------------------------------------
