#!/usr/bin/env bash

SYNTAX="
NAME
----
  clean - removes junk files from C/C++ compilations

SYNOPSIS
--------
  clean [-n][-q|-v|-vv] --[exe|logs|build|mac|pc|all] [DIRLIST]

OPTIONS
-------
  --all   Remove almost everything (Mac & PC files are left)
  --build Remove standard compilation files (e.g., object files, libraries)
  --exe   Remove only executables
  --logs  Remove log files (i.e., have '.log' extension)
  --mac   Remove Mac junk (e.g., .DS_Store)
  --pc    Remove PC junk (e.g., thumbs.db)
  -n      Don't execute, but display what would have been done
  -q      Quiet
  -v      Verbose
  -vv     Very verbose (prolific)

"

function Realpath() {
  /usr/bin/perl '-MCwd(abs_path)' -le '$p=abs_path(join(q( ),@ARGV));print $p if -e $p' "$*"
}

unset DIRS
declare -a DIRS
V='-v'
VV=0
(( i=0 ))
OPTS=
CMND="rm"
WHAT="intermediates"
while [[ $# -gt 0 ]]; do
  if [[ "$1" =~ ^-{1,2}a(ll)?$ ]]; then
    WHAT="all"
    OPTS=BLX
  elif [[ "$1" =~ ^-{1,2}av$ ]]; then
    WHAT="all"
    OPTS=BLX
    VV=1
  elif [[ "$1" =~ ^-{1,2}b(uild)?$ ]]; then
    WHAT+=" + build"
    OPTS+=B
  elif [[ "$1" =~ ^-{1,2}exe$ || "$1" =~ ^-x$ ]]; then
    WHAT+=" + executables"
    OPTS+=X
  elif [[ "$1" =~ ^-{1,2}h(elp)?$ ]]; then
    echo "${SYNTAX}"
    exit 0
  elif [[ "$1" =~ ^-{1,2}l(ogs)?$  || "$1" =~ ^-L$ ]]; then
    WHAT+=" + logfiles"
    OPTS+=L
  elif [[ "$1" =~ ^-{1,2}mac?$ ]]; then
    WHAT+=" + mac"
    OPTS+=M
  elif [[ "$1" =~ ^-{1,2}m(ost)?$ ]]; then
    WHAT="build including logs"
    OPTS=BL
  elif [[ "$1" =~ ^-{1,2}n(otreally)?$ ]]; then
    CMND="echo '# ${CMND}'"
  elif [[ "$1" =~ ^-{1,2}pc?$ ]]; then
    WHAT+=" + pc"
    OPTS+=P
  elif [[ "$1" =~ ^-{1,2}q(uiet)?$ ]]; then
    V=''
  elif [[ "$1" =~ ^-{1,2}v(erbose)?$ ]]; then
    V='-v'
  elif [[ "$1" =~ ^-{1,2}vv$ ]]; then
    VV=1
  elif [[ "$1" =~ ^- ]]; then
    echo "ERROR: Unknown option '$1'." 1>&2
    exit 1
  elif [[ -d "$1" ]]; then
    (( ++i ))
    DIRS[${i}]="$1"
  else
    echo "ERROR: Bad directory '$1'." 1>&2
    exit 1
  fi
  shift
done
if [[ ${#DIR[@]} == 0 ]]; then
  DIRS[1]="$(Realpath .)"
fi

echo "Cleaning ${WHAT} in ${DIRS[*]}"
YMD="$(date +%Y%m%d)"
OLD_LOGS="$(echo /tmp/clean_log.*)"
NEW_LOG="$(mktemp /tmp/clean_log.XXXX)"
for DIR in "${DIRS[@]}"; do
  test -s "${V}" && echo "Remove objects and dependencies under ${DIR}"
  {
    find "${DIR}" -name '*.[doP]' -exec "${CMND}" "${V}" {} \;
    find "${DIR}" -path "*/compile-${YMD}*.sh" -exec "${CMND}" "${V}" {} \;
    find "${DIR}" -name '*.x.dSYM' -exec "${CMND}" "${V}" -fr {} \;
  } 2>/dev/null >>"${NEW_LOG}"
  if   [[ "${OPTS}" =~ .*M.* ]]; then
    test -s "${V}" && echo "Removing Mac files"
    find "${DIR}" -type f -name '.DS_Store' -exec "${CMND}" "${V}" {} \; 2>/dev/null >>"${NEW_LOG}"
  fi
  if   [[ "${OPTS}" =~ .*P.* ]]; then
    test -s "${V}" && echo "Removing PC files"
    find "${DIR}" -type f -name 'thumbs.db' -exec "${CMND}" "${V}" {} \; 2>/dev/null >>"${NEW_LOG}"
  fi
  if   [[ "${OPTS}" =~ .*L.* ]]; then
    test -s "${V}" && echo "Removing log files"
    find "${DIR}" -type f -name '*.log' -exec "${CMND}" "${V}" {} \; 2>/dev/null >>"${NEW_LOG}"
    for LOG in ${OLD_LOGS}; do
      "${CMND}" "${V}" "${LOG}" 2>/dev/null >> "${NEW_LOG}"
    done
  fi
  if [[ "${OPTS}" =~ .*X.* ]]; then
    test -s "${V}" && echo "Removing executable files"
    find "${DIR}" -type f -name '*.x' -exec "${CMND}" "${V}" {} \; 2>/dev/null >>"${NEW_LOG}"
  fi
  if [[ "${OPTS}" =~ .*B.* ]]; then
    test -s "${V}" && echo "Removing build directories"
    {
      find "${DIR}" -type d -name build -exec "${CMND}" "${V}" -fr {} \;
      find "${DIR}" -type d -name cmake-build-\* -exec "${CMND}" "${V}" -fr {} \;
    } 2>/dev/null >>"${NEW_LOG}"
  fi
done
if [[ ${VV} == 1 ]]; then
  less -EFK "${NEW_LOG}"
fi
REMOVED="$(wc -l "${NEW_LOG}" | /usr/bin/perl -lane 'print $F[0]')"
if [[ ${REMOVED} > 0 ]]; then (( REMOVED-- )); fi
if [[ ${REMOVED} == 0 ]]; then REMOVED="no" ; fi
# shellcheck disable=SC2312
echo "Removed ${REMOVED} files. Details may be found in ${NEW_LOG}"
find /tmp/ -cmin +1 -name clean_log.\* -exec rm -f {} \; 2>/dev/null

# vim:nospell
