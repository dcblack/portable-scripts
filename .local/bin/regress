#!/usr/bin/env bash
#
# Run solutions


function Realpath() {
  /usr/bin/perl '-MCwd(abs_path)' -le '$p=abs_path(join(q( ),@ARGV));print $p if -e $p' "$*"
}

ORIG_DIR="$(Realpath .)"
LAB_DIR="$(git rev-parse --show-toplevel)"
LAB_NAME="${LAB_DIR//.*\///}"

SCRIPT="$(Realpath "$0")"
SCRIPT="$(dirname "${SCRIPT}")/utils.bash"
if [[ -x "${SCRIPT}" ]]; then
  # shellcheck source=utils.bash disable=SC1091
  source "${SCRIPT}" "$0"
else
  echo "Error: Missing ${SCRIPT}" 1>&2; exit 1
fi
SetupLogdir "$0"

if [[ -z "${LAB_DIR}" ]]; then
  Report_error "This script must be run from within a valid set of exercises"
fi
_do cd "${LAB_DIR}" || Die "Unable to find working path from '${ORIG_DIR}'"

#-------------------------------------------------------------------------------
function Clean_exercise() {
  Report_info "Cleaning $*"
  rm -fr "$@"
  git checkout "$@";
}

function Do_exercise() {
  local ANSWER_DIR EXERCISE_DIR
  ANSWER_DIR="$1"
  EXERCISE_DIR="$2"
  echo ""
  Ruler -blu "${ANSWER_DIR}"
  # Choose type of test to run based on files found in respective answers directory
  if [[ -f "${ANSWER_DIR}/GNUmakefile" || -f "${ANSWER_DIR}/Makefile}" ]]; then
    _do make -C "${EXERCISE_DIR}" clean run || echo "# FAILED ${ANSWER_DIR}";
  elif [[ -f "${ANSWER_DIR}/CMakeLists.txt" && -d "${ANSWER_DIR}/tests/CMakeLists.txt" ]]; then
    _do build -C "${ANSWER_DIR}" -clean -test || echo "# FAILED ${ANSWER_DIR}";
  elif [[ -f "${ANSWER_DIR}/CMakeLists.txt" ]]; then
    _do build -C "${ANSWER_DIR}" -clean -run || echo "# FAILED ${ANSWER_DIR}";
  elif [[ -f "${ANSWER_DIR}/GNUmakefile" || -f "${ANSWER_DIR}/Makefile}" ]]; then
    _do rsync -av "${ANSWER_DIR}/" "${EXERCISE_DIR}/";
    _do make -C "${EXERCISE_DIR}" clean run || echo "# FAILED ${ANSWER_DIR}";
  else
    echo "# No make automation files found for ${EXERCISE_DIR}"
  fi
# make -C "${EXERCISE_DIR}" stats;
}

#-------------------------------------------------------------------------------
NOW="$(date "+Regression test %c %Z")"
Report_info "${NOW} for ${LAB_NAME}"

if [[ $# == 0 ]]; then
  for f in ./ex[0-9]* ; do
    Clean_exercise "${f}"
  done
else
  for f in "$@"; do
    Clean_exercise "${f//?part*}"
  done
fi

if [[ $# == 0 ]]; then
  # shellcheck disable=SC2312
  (
    for f in ex[0-9]*; do
      if [[ -d "answers/${f}/part1" ]]; then
        # Exercises that have multiple parts
        for p in "answers/${f}/part"*; do
          Do_exercise "${p}" "${f}"
        done
      else
        Do_exercise "answers/${f}" "${f}"
      fi
    done
  ) 2>&1 | Log
else
  # shellcheck disable=SC2312
  (
    for f in "$@"; do
      if [[ "${f}" =~ / ]]; then
        p="${f}"
        f="$(dirname "${f}")"
        Do_exercise "answers/${p}" "${f}"
      else
        Do_exercise "answers/${f}" "${f}"
      fi
    done
  ) 2>&1 | Log
fi

Echo ""
Ruler -blue Summary
FAILURES="$(grep -c FAIL "${LOGFILE:?}")"
if [[ ${FAILURES} == 0 ]]; then
  Report_info -grn "# Passed all tests"
else
  grep FAILED "${LOGFILE:?}"
  Report_error "# Failed ${FAILURES} tests"
fi
NOW="$(date "+# Completed %c %Z")"
Report_info "${NOW} from ${LAB_NAME}"
Ruler -blu
Report_info "REMINDER: Exercises are not clean."
LOGPATH="$(Realpath "${LOGFILE:?}")"
Report_info "Results in ${LOGPATH}"

# vim:nospell
