#!/usr/bin/env perl
#
#$Info: update-same - Updates files from a list generated by same. $
#
my $syntax = '
NAME
----

same-update - re-establish "sameness" in a list of files

SYNOPSIS
--------

same-update -h|--help

same-update [-n][-v] SAME_FILE.txt

DESCRIPTION
-----------

Given the output from same-find, copy the first file in list of identical files.

OPTIONS
-------

| Flag | Description                               |
| ---- | ----------------------------------------- |
| -n   | not really - just show what would be done |
| -v   | verbose                                   |

EXAMPLE
-------

```bash
same-find -o t.md .
same-update t.md
```

';

require v5.6;
use strict;
use warnings;
use Cwd qw(abs_path getcwd);
use English;
use File::Basename;
use FileHandle;
use FindBin qw($RealBin $RealScript);
use Getopt::Long;
use Pod::Usage;
STDOUT->autoflush(1);
STDERR->autoflush(1);

our %opt;

sub rev_by_date { $b->[9] <=> $a->[9] }
sub fwd_by_date { $a->[9] <=> $b->[9] }

sub Check_newest {
  my @orig = $_[0];
  my $orig = $orig[$#orig];
  my @files = map { [ stat $_, $_ ] } @_;
  my @sorted_files = sort rev_by_date @files;
  my @newest = @{$sorted_files[0]};
  my $newest = $newest[$#newest];
  if ( $newest ne $orig ) {
    printf( "WARNING: %s is older than %s\n", $orig, $newest );
  }
  return $newest eq $orig;
}

our $logfile = "same.log";

sub Rsync {
  my $new_name = shift @_;
  for my $old_name (@_) {
    my $cmd = "rsync -auv '$new_name' '$old_name' >>'$logfile' 2>&1";
    system( "echo % $cmd" );
    system($cmd) unless exists $opt{-n};
  }
}

sub Hash {
  my $file = shift @_;
  die "Hash($file) error" unless $file ne '' and -e $file and -r $file and -f $file;
  my $hash = `git hash-object $file`;
  chomp $hash;
  return $hash;
}

sub Identical {
  my ($old,$new) = @_;
  if( -s $old != -s $new ) { return 0; }
  if( Hash($old) eq Hash($new) ) { return 0; }
  return 1;
}

# Defaults
my $limit=-1;

# Process command-line options
while( $ARGV[0] =~ m{^-} ) {
  my $opt = shift @ARGV;
  if( $opt =~ m{^(-h|-help|--help)$} ) {
    printf( "%s",${syntax} );
    exit;
  }
  elsif( $opt =~ m{^-\d+$} ) {
    $limit = -${opt};
  }
  elsif( $opt =~ m{^-{1,2}l(og)?$} ) {
    if( scalar(@ARGV)>1 and not $ARGV[0] =~ m{^[-]} and -w "$ARGV[0]" ) {
      $logfile = shift @ARGV;
    } else {
      printf( "Error: Must specify logfile\n" );
      exit 1;
    }
  }
  elsif( $opt =~ m{^-{1,2}n(ah)?$} ) {
    $opt{-n} = 1;
  }
  elsif( $opt =~ m{^-{1,2}v(erbose)?$} ) {
    $opt{-v} = 1;
  }
  else {
    printf( "Error: Ignoring unknown option '%s'\n", $opt );
  }
}

my $fname = shift @ARGV;
open(my $fh, "<", $fname)
  or die "Can't open < $fname: $!";
my @lines = <$fh>;
close $fh;
unlink $logfile if -r $logfile;
for my $line (@lines) {
  chomp $line; chomp $line;
  next if $line =~ m{^\s*$};   # skip blank lines
  next if $line =~ m{^\s*#};   # skip comments
  $line =~ s{^ *\d+[.]? +}{};  # remove numbering
  $line =~ s{^(- )?\[.\] *}{}; # remove check boxes
  my @files = split m{\s+},$line;
  next if scalar @files < 2;
  my $new_name = shift @files;
  my $new_date = (stat $new_name)[9];
  for my $old_name (@files) {
    my $old_date = (stat $old_name)[9];
   #if( $old_date > $new_date ) {
   #  printf( "Warning: Skipping because %s is newer than %s\n", $old_name, $new_name );
   #} elsif( not Identical($old_name, $new_name) ) {
      Rsync $new_name, $old_name;
   #}
    --$limit if $limit > 0;
    exit 0 if $limit == 0;
  }
}

exit 0;
__DATA__
=pod

=head1 NAME

{:SCRIPT_NAME:} - {:ONE_LINE_SUMMARY:}

=head1 SYNOPSIS

{:SCRIPT_NAME:} {:SYNTAX:}

=head1 DESCRIPTION

{:DESCRIBE_DETAILS:}

=cut

