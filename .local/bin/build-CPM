#!/usr/bin/env bash
#
#$Info: build-CPM - Install CPM, the CMake Package Manager, under the current project. $
#
# IMPORTANT; Must be run inside project git repository.
if [[ "$!" =~ ^-{1,2}h(elp)?$ ]]; then
  cat <<'HELPTEXT'
Name
----
build-CPM - Install CPM, the CMake Package Manager, under the current project.

Synopsis
--------
build-CPM --help|-h # produces this text
build-CPM [--clean]

Description
-----------
Installs the [CMake Package Manager]() under `extern/lib/cmake`, which is located based on the top-level git repository's location.

IMPORTANT
---------
Must be run inside project git repository.

HELPTEXT
  exit 0;
fi

#-------------------------------------------------------------------------------
# Configure
#...............................................................................
LIBNAME="CPM-CMake (CMake Package Manager)"
GIT_URL="https://github.com/cpm-cmake/CPM.cmake.git"

#-------------------------------------------------------------------------------
# Essential
#...............................................................................
function Realpath() {
  if [[ $# == 0 ]]; then set - .; fi
  /usr/bin/perl '-MCwd(abs_path)' -le '$p=abs_path(join(q( ),@ARGV));print $p if -e $p' "$*"
}

# Using Essential-IO
SCRIPTDIR="$(Realpath "$(dirname "$0")"/../scripts)"
if [[ ! -r "${SCRIPTDIR}/Essential-IO" ]]; then
  SCRIPTDIR="$(Realpath "${HOME}"/.local/scripts)"
fi
if [[ ! -r "${SCRIPTDIR}/Essential-IO" ]]; then
  SCRIPTDIR="$(Realpath "$(dirname "$0")")"
fi
if [[ ! -r "${SCRIPTDIR}/Essential-IO" ]]; then
  printf "FATAL: Missing required source file '%s'\n" "${SCRIPTDIR}/Essential-IO"
  crash
fi
# shellcheck disable=SC2250,SC1091
source "$SCRIPTDIR/Essential-IO"

#-------------------------------------------------------------------------------
# Main
#...............................................................................
function Build_CPM()
{
  TOOL_PATH="$(Realpath "$0")"
  Report_info "Attempting to build ${LIBNAME} using ${TOOL_PATH}"
  HERE="$(Realpath ".")"
  if [[ "${HERE}" =~ .*/extern ]]; then
    cd "${HERE/extern*/}" || Report_error "Trying to escape extern sub-directory failed"
  fi
  WORKTREE_DIR="$(git rev-parse --show-toplevel)" || Report_error "Not in git repo"
  REPO_DIR="$(basename "${GIT_URL}" .git)"
  INSTALL_DIR="${WORKTREE_DIR}/extern"
  mkdir -p "${INSTALL_DIR}"
  cd "${INSTALL_DIR}" || Report_fatal "Unable to enter ${INSTALL_DIR}"
  Report_info "Building under ${INSTALL_DIR}"
  if [[ "$1" =~ ^-{1,2}clean$ ]]; then
    shift
    rm -fr "${REPO_DIR}"
  fi
  if [[ -d "${REPO_DIR}/.git" ]]; then
    _do git -C "${REPO_DIR}" pull
    Report_info "Successfully updated ${LIBNAME}"
  else
    rm -fr "${REPO_DIR}"
    _do git clone "${GIT_URL}" || Report_error "Unable to clone"
  fi
  TARGET_DIR="$(Realpath "${REPO_DIR}")"
  _do rsync -auv "${TARGET_DIR}/cmake/" "${INSTALL_DIR}/lib/cmake/"
  Report_info "Successfully installed ${LIBNAME}"
}

Build_CPM "$@"

# vim:nospell
