#!/usr/bin/env zsh
#
#$About: wd - working directory shortcut.$
#
# Function index:
#   Wd_help
#   Wd_parse
#   swd_func
#   lwd_func
#   rwd_func
#   wds_func
#   aliases

function Realpath ()
{
  /usr/bin/perl '-MCwd(abs_path)' -le '$p=abs_path(join(q( ),@ARGV));print $p if -e $p' "$*"
}

function Firstreal() {
  if [[ "${SHELL}" =~ zsh ]]; then
    set -o shwordsplit
  fi
  perl -le 'for(@ARGV){for my $p (split(qq{[\n\t ]+})){next unless -e $p;print $p;exit 0;}}' "$@"
}

SCRIPTDIR="${HOME}/.local/scripts"
#if [[ "$0" == /bin/bash ]]; then
#  SCRIPTDIR="${HOME}/.local/scripts"
#else
#  SCRIPTDIR="$(Realpath "$(dirname "$0")"/../scripts)"
#fi
if [[ ! -d "${SCRIPTDIR}" ]]; then
  printf "FATAL: eissing required directory '%s'\n" "${SCRIPTDIR}"
  crash
fi
# shellcheck source=$HOME/scripts/Essential-IO disable=SC2250,SC1091
source "${SCRIPTDIR}/Essential-IO"

export wd_favs wd_set wd_init wd_force wd_dir wd_verb wd_notreally wd_debug wd_vers
real_favs="$(Firstreal "${HOME}/Favorites" "${HOME}/favs")"
wd_favs="$(Realpath "${real_favs}")"
wd_init=false
if [[ "$1" == "-init" ]]; then
  wd_init=true
  shift
  if [[ ${wd_verb} == true ]]; then
    Report_info "Initializing wd ${wd_vers}"
  fi
fi
if [[ ${wd_init} == true ]]; then
  # aliases
  alias wd=lwd
  alias lwds=wds
  alias swds=wds
fi

#-------------------------------------------------------------------------------
function Wd_help() # internal
{
  cat <<EOT
Name
----

swd - save working directory
lwd - load working directory (aka wd)
rwd - remove working directory
wds - list saved working directories aka (lwds, swds)

Synopsis
--------

swd [-init] [SET] [DIR]
lwd [OPTIONS] [SET]
wds
swds
lwds

| Option | Description
| :----  | :----------
| -help  | This text
| -force | Use to skip verification during removal
| -init  | Initialize/reload these scripts
| -list  | List current set
| -vers  | Display version
| -print | Display path instead of going there

EOT
}

#-------------------------------------------------------------------------------
function Wd_parse() # internal
{
  if [[ "${SHELL}" == /bin/zsh ]]; then set -o shwordsplit ; fi # compatible
  export wd_favs wd_set wd_init wd_force wd_dir wd_verb wd_notreally wd_debug wd_vers wd_print
  wd_vers=1.0.3
  local real_favs
  real_favs="$(Firstreal "${HOME}/Favorites" "${HOME}/favs")"
  wd_favs="$(Realpath "${real_favs}")"
  wd_force=false
  wd_verb=false
  wd_debug=false
  wd_print=false
  wd_notreally=false
  if [[ -n "${wd_set}" ]]; then
    wd_pset="${wd_set}"
  fi
  if [[ -n "${wd_dir}" ]]; then
    wd_pdir="${wd_dir}"
  fi
  if [[ -z "${ITERM2_TAB+x}" ]]; then
    wd_set=1
  else
    wd_set="${ITERM2_TAB}"
  fi
  wd_dir=.
  # Parse command-line
  local arg
  ARGS=""
  while [[ "$#" != 0 ]]; do
    arg="$1"
    shift
    case "${arg}" in
      -init)
        # shellcheck source=$HOME/.local/bin/wd disable=SC2250,SC1091
        source "${HOME}/.local/bin/wd" -init
        ;;
      -h|-help|--help)   Wd_help ;;
      -l|-list|--list)
        if [[ -n "${wd_pset}" ]]; then
          Report_info "wd_set=${wd_pset} wd_dir=${wd_pdir}"
          wd_set="${wd_pset}"
          wd_dir="${wd_pdir}"
        else
          Report_info "wd_set=${wd_set} wd_dir=${wd_dir}"
        fi
        ;;
      -d|-dir|--dir|-wd|-C)
          wd_dir="${1}"
          shift
        ;;
      -p|-prev|--prev)
          wd_set="${wd_pset}"
          wd_dir="${wd_pdir}"
        ;;
      -vers|-version|--version) Report_info "wd version ${wd_vers}" ;;
      -v|-verbose|--verbose) wd_verb=true ;;
      -debug|--debug|-D) wd_debug=true ;;
      -N|-notreally|--notreally) wd_notreally=true ;;
      -f|-force|--force) wd_force=true ;;
          -[1-9][0-9]) wd_set=$(( -"${arg}" )) ;;
       [ci][1-9][0-9]) wd_set="${arg}" ;;
           [1-9][0-9]) wd_set="${arg}" ;;
               -[0-9]) wd_set=$(( -"${arg}" )) ;;
            [ci][0-9]) wd_set="${arg}" ;;
                [0-9]) wd_set="${arg}" ;;
      -P|-print|--print) wd_print=true ;;
      -*) Report_error "Unknown option: '${arg}'" || return 1 ;;
      *)
        if [[ -z "${ARGS}" ]]; then
          ARGS="${arg}"
        else
          ARGS="${ARGS} ${arg}"
        fi
        ;;
    esac
  done
  if [[ ${wd_debug} == true ]]; then
    Report_debug -f "wd_favs='${wd_favs}'"
    Report_debug -f "wd_set='${wd_set}'"
    Report_debug -f "wd_dir='${wd_dir}'"
    Report_debug -f "wd_pset='${wd_pset}'"
    Report_debug -f "wd_pdir='${wd_pdir}'"
    Report_debug -f "wd_init='${wd_init}'"
    Report_debug -f "wd_verb='${wd_verb}'"
    Report_debug -f "ARGS='${ARGS}'"
  fi
  return 0
}

#-------------------------------------------------------------------------------
function swd() # swd_func
{
  Wd_parse "$@" || return 1
  wd_dir="$(Realpath "${wd_dir}")"
  local today
  today="$(date)"
  Report_info "Saved wd-${wd_set} => ${wd_dir}"
  printf "swd %2d '%s' ; # %s\n" "${wd_set}" "${wd_dir}" "${today}" >> "${HOME}/.wdhistory"
  rm -f "${wd_favs}/wd-${wd_set}"
  ln -s "${wd_dir}" "${wd_favs}/wd-${wd_set}"
}

#-------------------------------------------------------------------------------
function lwd() # lwd_func
{
  Comment "Load saved working directory"
  Wd_parse "$@" || return 1

  if [[ -d "${wd_favs}/wd-${wd_set}" ]]; then
    local target
    target="$(Realpath "${wd_favs}/wd-${wd_set}")"
    if [[ ${wd_print} == true ]]; then
      echo "${target}"
      return 0
    fi
    # shellcheck disable=SC2086 # intended expansion
    j "${target}" ${ARGS} || Report_error "Whoops! Unable to cd into '${wd_favs}/wd-${wd_set}'"
  else
    Report_error "Missing saved set wd-${wd_set}" 1>&2
  fi
  if [[ ${wd_verb} == true ]]; then
    pwd
  fi

}

#-------------------------------------------------------------------------------
function rwd() # rwd_func
{
  Comment "Remove working directory"
  Wd_parse "$@" || return 1

  local REPLY wd_rdir
  wd_rdir="$(Realpath "${wd_favs}/wd-${wd_set}")"
  if [[ -h "${wd_favs}/wd-${wd_set}" ]]; then
    if [[ ${wd_force} == false ]]; then
      while true; do
        REPLY="?"
        Read "Confirm removal of wd-${wd_set} -> ${wd_rdir} (y|n):"
        case "${REPLY}" in
          y|yes) REPLY="y" ; break ;;
          n|no)  REPLY="n" ; break ;;
          abort) return ;;
          *)     REPLY=""  ;;
        esac
      done
    fi
    if [[ "${REPLY}" == "y" ]]; then
      if rm "${wd_favs}/wd-${wd_set}"; then
        Report_info  "Removed ${wd_favs}/wd-${wd_set}"
      else
        Report_error "Unable to remove ${wd_favs}/wd-${wd_set}"
      fi
    else
      Report_info "Ignored removal of ${wd_favs}/wd-${wd_set}"
    fi
  else
    Report_info "No saved set to remove wd-${wd_set}"
  fi
}

#-------------------------------------------------------------------------------
function wds() # wds_func
{
  Comment "List saved working directories"
  if [[ "${SHELL}" == /bin/zsh ]]; then
    set -o shwordsplit
  fi
  export wd_favs
  local real_favs
  real_favs="$(Firstreal "${HOME}/Favorites" "${HOME}/favs")"
  wd_favs="$(Realpath "${real_favs}")"
  local p n r h t
  h="$(Realpath .)"
  for p in $(find "${wd_favs}" -name 'wd-*' | sort -n -t - -k 2)
  do
    n="${p//*\//}"
    r="$(Realpath "${p}")"
    if [[ "${r}" =~ ^${h} ]]
    then
      t="${r/#${h}/}"
      # shellcheck disable=SC2154
      printf "${CCYN}%s ${CGRN}->${NONE} %s${NONE}\n" "${n}" "${CMAG}${BOLD}${h}${NONE}${t}"
    elif [[ -z "${r}" ]]; then
      # shellcheck disable=SC2154
      r="${CRED}${BOLD}?? ${NONE}${UNDR}${CRED}$(readlink "${p}") ??${NONE}"
      printf "${CCYN}%s ${CGRN}->${NONE} %s\n" "${n}" "${r}"
    else
      # shellcheck disable=SC2154
      printf "${CCYN}%s ${CGRN}->${NONE} %s\n" "${n}" "${r}"
    fi
  done
  export cwd lwd
  cwd="$(Realpath .)"
  printf "lwd '%s'\n" "${lwd}"
  printf "cwd '%s'\n" "${cwd}"
}

#TAF vim:nospell
