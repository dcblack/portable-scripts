#!/usr/bin/env zsh
#
#$About: wd - working directory shortcut.$
#
# Function index:
#   Wd_help
#   Wd_parse
#   swd_func
#   lwd_func
#   rwd_func
#   wds_func
#   aliases
#
# shellcheck disable=SC2312

if builtin command -v "realpath" 1>/dev/null; then
  # Faster version in Linux
  function Realpath ()
  {
    realpath "$@"
  }
else
  function Realpath ()
  {
    /usr/bin/perl '-MCwd(abs_path)' -le '$p=abs_path(join(q( ),@ARGV));print $p if -e $p' "$*"
  }
fi

function Firstreal() {
  if [[ -n "${ZSH_VERSION}" ]]; then set -o shwordsplit ; fi
  /usr/bin/perl -le 'for(@ARGV){for my $p (split(qq{[\n\t ]+})){next unless -e $p;print $p;exit 0;}}' "$@"
}

function read_into_array() {
    local arr_name=$1
    local cmd="$2"

    eval "${arr_name}=()"
    while IFS= read -r line; do
        eval "${arr_name}+=(\"${line}\")"
    done < <(eval "${cmd}")
}

SCRIPTDIR="${HOME}/.local/scripts"
#if [[ "$0" == /bin/bash ]]; then
#  SCRIPTDIR="${HOME}/.local/scripts"
#else
#  SCRIPTDIR="$(Realpath "$(dirname "$0")"/../scripts)"
#fi
if [[ ! -d "${SCRIPTDIR}" ]]; then
  printf "FATAL: eissing required directory '%s'\n" "${SCRIPTDIR}"
  crash
fi
# shellcheck source=$HOME/scripts/Essential-IO disable=SC2250,SC1091
source "${SCRIPTDIR}/Essential-IO"

export wd_favs wd_set wd_sets wd_setn wd_init wd_force wd_dir wd_verb wd_notreally wd_debug wd_vers
real_favs="$(Firstreal "${HOME}/Favorites" "${HOME}/favs")"
wd_favs="$(Realpath "${real_favs}")"
wd_init=false
if [[ "$1" == "-init" ]]; then
  wd_init=true
  shift
  if [[ ${wd_verb} == true ]]; then
    Report_info "Initializing wd ${wd_vers}"
  fi
fi
if [[ ${wd_init} == true ]]; then
  # aliases
  alias wd=lwd
fi

#-------------------------------------------------------------------------------
function Wd_help() # internal
{
  cat <<EOT
Name
----

swd - save working directory
lwd - load working directory (aka wd)
rwd - remove working directory(s)
wds - list saved working directories

Synopsis
--------

source "${HOME}/.local/bin/wd" -init # at login
wd -init
swd [SET] [DIR]
lwd [OPTIONS] [SET]
wds
rwd SET

| Option | Description
| :----  | :----------
| -help  | This text
| -force | Use to skip verification during removal
| -init  | Initialize/reload these scripts
| -list  | List current set
| -vers  | Display version
| -print | Display path instead of going there

EOT
}

#-------------------------------------------------------------------------------
function Wd_set()
{
  export wd_set wd_sets wd_setn
  if [[ ${wd_setn} == 0 ]]; then
    wd_set="$1"
    wd_sets="$1"
    wd_setn=1
  else
    wd_sets+=" $1"
    (( ++wd_setn ))
  fi
}

#-------------------------------------------------------------------------------
function Wd_parse() # internal
{
  if [[ -n "${ZSH_VERSION}" ]]; then set -o shwordsplit ; fi
  #-----------------------------------------------------------------------------
  # Defaults
  #-----------------------------------------------------------------------------
  export wd_favs wd_set wd_sets wd_setn wd_init wd_force wd_dir wd_verb wd_notreally wd_debug wd_vers wd_print
  wd_vers=1.1
  local real_favs
  real_favs="$(Firstreal "${HOME}/Favorites" "${HOME}/favs")"
  wd_favs="$(Realpath "${real_favs}")"
  wd_force=false
  wd_verb=false
  wd_debug=false
  wd_print=false
  wd_notreally=false
  wd_sets=""
  wd_setn=0
  if [[ -n "${wd_set}" ]]; then
    wd_pset="${wd_set}"
  fi
  if [[ -n "${wd_dir}" ]]; then
    wd_pdir="${wd_dir}"
  fi
  if [[ -z "${ITERM2_TAB+x}" ]]; then
    wd_set=1
  else
    wd_set="${ITERM2_TAB}"
  fi
  wd_dir=.
  #-----------------------------------------------------------------------------
  # Parse command-line
  #-----------------------------------------------------------------------------
  local arg
  ARGS=""
  while [[ "$#" != 0 ]]; do
    arg="$1"
    shift
    case "${arg}" in
      -init)
        # shellcheck source=$HOME/.local/bin/wd disable=SC2250,SC1091
        source "${HOME}/.local/bin/wd" -init
        ;;
      -h|-help|--help)   Wd_help ;;
      -l|-list|--list)
        if [[ -n "${wd_pset}" ]]; then
          Report_info "wd_set=${wd_pset} wd_dir=${wd_pdir}"
          wd_set="${wd_pset}"
          wd_dir="${wd_pdir}"
        else
          Report_info "wd_set=${wd_set} wd_dir=${wd_dir}"
        fi
        ;;
      -d|-dir|--dir|-wd|-C)
          wd_dir="${1}"
          shift
        ;;
      -p|-prev|--prev)
          wd_set="${wd_pset}"
          wd_dir="${wd_pdir}"
        ;;
      -vers|-version|--version) Report_info "wd version ${wd_vers}" ;;
      -v|-verbose|--verbose) wd_verb=true ;;
      -debug|--debug|-D) wd_debug=true ;;
      -N|-notreally|--notreally) wd_notreally=true ;;
      -f|-force|--force) wd_force=true ;;
      [a-z][1-9][0-9][0-9]) Wd_set "${arg}" ;;
          -[1-9][0-9][0-9]) Wd_set "${arg/-}" ;;
           [1-9][0-9][0-9]) Wd_set "${arg}" ;;
           [a-z][1-9][0-9]) Wd_set "${arg}" ;;
               -[1-9][0-9]) Wd_set "${arg/-}" ;;
                [1-9][0-9]) Wd_set "${arg}" ;;
                [a-z][0-9]) Wd_set "${arg}" ;;
                    -[0-9]) Wd_set "${arg/-}" ;;
                     [0-9]) Wd_set "${arg}" ;;
      -P|-print|--print) wd_print=true ;;
      -*) Report_error "Unknown option: '${arg}'" || return 1 ;;
      *)
        if [[ -z "${ARGS}" ]]; then
          ARGS="${arg}"
        else
          ARGS="${ARGS} ${arg}"
        fi
        ;;
    esac
  done
  if [[ ${wd_debug} == true ]]; then
    Report_debug -f "wd_favs='${wd_favs}'"
    Report_debug -f "wd_set='${wd_set}'"
    Report_debug -f "wd_dir='${wd_dir}'"
    Report_debug -f "wd_pset='${wd_pset}'"
    Report_debug -f "wd_pdir='${wd_pdir}'"
    Report_debug -f "wd_setn='${wd_setn}'"
    Report_debug -f "wd_sets='${wd_sets}'"
    Report_debug -f "wd_init='${wd_init}'"
    Report_debug -f "wd_verb='${wd_verb}'"
    Report_debug -f "ARGS='${ARGS}'"
  fi
  return 0
}

#-------------------------------------------------------------------------------
function swd() # swd_func
{
  local today wd_prev
  Wd_parse "$@" || return 1
  wd_prev="$(readlink "${wd_favs}/wd-${wd_set}")"
  wd_dir="$(Realpath "${wd_dir}")"
  today="$(date)"
  if [[ "${wd_dir}" == "${wd_prev}" ]]; then
    Report_info "Unchanged wd-${wd_set}"
    return
  fi
  Report_info "Previously wd-${wd_set} => ${wd_prev}"
  Report_info "Saved wd-${wd_set} => ${wd_dir}"
  printf "swd %2d '%s' ; # %s\n" "${wd_set}" "${wd_dir}" "${today}" >> "${HOME}/.wdhistory"
  rm -f "${wd_favs}/wd-${wd_set}"
  ln -s "${wd_dir}" "${wd_favs}/wd-${wd_set}"
}

#-------------------------------------------------------------------------------
function lwd() # lwd_func
{
  Comment "Load saved working directory"
  Wd_parse "$@" || return 1

  if [[ -d "${wd_favs}/wd-${wd_set}" ]]; then
    local target
    target="$(Realpath "${wd_favs}/wd-${wd_set}")"
    if [[ ${wd_print} == true ]]; then
      echo "${target}"
      return 0
    fi
    # shellcheck disable=SC2086 # intended expansion
    j "${target}" ${ARGS} || Report_error "Whoops! Unable to cd into '${wd_favs}/wd-${wd_set}'"
  else
    Report_error "Missing saved set wd-${wd_set}" 1>&2
  fi
  if [[ ${wd_verb} == true ]]; then
    pwd
  fi

}

#-------------------------------------------------------------------------------
function rwd() # rwd_func
{
  Comment "Remove working directory(s)"
  export wd_favs wd_set wd_sets wd_setn wd_force
  Wd_parse "$@" || return 1

  local REPLY wd_rdir all=0
  local -a sets
  if [[ ${wd_setn} == 0 ]]; then
    Report_fatal "Did not specify any set(s) to remove"
    return 1
  else
    sets=( "${wd_sets[@]}" )
  fi
  for s in "${sets[@]}"; do
    wd_rdir="$(Realpath "${wd_favs}/wd-${s}")"
    if [[ -h "${wd_favs}/wd-${s}" ]]; then
      if [[ ${wd_force} == false ]]; then
        if [[ ${all} == 0 ]]; then
          while true; do
            REPLY="?"
            Read "Confirm removal of wd-${s} -> ${wd_rdir} (y|all|n):"
            case "${REPLY}" in
              y|yes) REPLY="y" ; break ;;
              n|no)  REPLY="n" ; break ;;
              a|all) REPLY="y"; all=1 ; break ;;
              abort) return ;;
              *)     REPLY=""  ;;
            esac
          done
        fi
      fi
      if [[ "${REPLY}" == "y" ]]; then
        if rm "${wd_favs}/wd-${s}"; then
          Report_info  "Removed ${wd_favs}/wd-${s}"
          printf "rwd %2d # '%s' %s\n" "${wd_set}" "${wd_dir}" "${today}" >> "${HOME}/.wdhistory"
        else
          Report_error "Unable to remove ${wd_favs}/wd-${s}"
        fi
      else
        Report_info "Ignored removal of ${wd_favs}/wd-${s}"
      fi
    fi
  done
}

#-------------------------------------------------------------------------------
function wds() # wds_func
{
  export wd_favs
  local s=0
  if [[ "$1" == "-s" ]]; then s=1; shift; fi
  local NONE
  NONE="$(_C none)"
  local FILTER
  FILTER=( "$@" )
  Comment "List saved working directories"
  if [[ -n "${ZSH_VERSION}" ]]; then set -o shwordsplit; fi
  export wd_favs
  local real_favs
  real_favs="$(Firstreal "${HOME}/Favorites" "${HOME}/favs")"
  wd_favs="$(Realpath "${real_favs}")"
  local p n r h t l
  declare -a favs
  h="$(Realpath .)"
  read_into_array favs "find '${wd_favs}' -name 'wd-*' | sort -t- -k 2n,2n -k 3n,3n"
  
  for p in "${favs[@]}"
  do
    if [[ ${#FILTER[@]} != 0 ]]; then
      local found
      found=0
      for f in "${FILTER[@]}"; do
        if [[ "${p}" =~ ${f} ]]; then
          found=1
          break
        fi
      done
      if [[ ${found} == 0 ]]; then
        continue
      fi
    fi
    n="${p//*\//}"
    r="$(Realpath "${p}")"
    l="${r}"
    if [[ ${s} == 1 ]]; then
      # Shorten
      case "${l}" in
        "${HOME}"*)
          l="${l/${HOME}/~}"
          ;;
        "/Volumes/"*)
          l="${l/\/Volumes\//}"
          l="${l/\//:}"
          ;;
        *)
          ;;
      esac
    fi
    if [[ "${r}" =~ ^${h} ]]
    then
      t="${r/#${h}/}"
      # shellcheck disable=SC2154
      printf "$(_C cyan)%s $(_C green)->${NONE} %s${NONE}\n" "${n}" "$(_C bold magenta)${h}${NONE}${t}"
    elif [[ -z "${r}" ]]; then
      # shellcheck disable=SC2154
      r="$(_C bold red)?? ${NONE}$(_C underscore red)$(readlink "${p}") ??${NONE}"
      printf "$(_C cyan)%s $(_C green)->${NONE} %s\n" "${n}" "${r}"
    else
      # shellcheck disable=SC2154
      printf "$(_C cyan)%s $(_C green)->${NONE} %s\n" "${n}" "${l}"
    fi
  done
  # Check for other matches
  local max=10
  read_into_array favs "find '${wd_favs}' -name 'wd-*' | sort -t- -k 2n,2n -k 3n,3n"
  for p in "${favs[@]}"
  do
    n="${p//*\//}"
    r="$(Realpath "${p}")"
    if [[ "${r}" =~ ^${h} ]]
    then
      t="${r/#${h}/}"
      # shellcheck disable=SC2154
      printf "$(_C cyan)%s $(_C green)->${NONE} %s${NONE}\n" "${n}" "$(_C bold magenta)${h}${NONE}${t}"
      (( --max ))
      if [[ ${max} -le 0 ]]; then break; fi
    fi
  done
  export cwd lwd
  cwd="$(Realpath .)"
  printf "lwd '%s'\n" "${lwd}"
  printf "cwd '%s'\n" "${cwd}"
}

#TAF vim:nospell
