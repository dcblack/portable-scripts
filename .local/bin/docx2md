#!/usr/bin/env bash
#
#$Info: docx2md - Convert Word to Markdown. $

if [[ "$1" =~ ^-{1,2}h(elp)?$ ]]; then
  cat <<'HELPTEXT'
Name
----

docx2md - Convert Word to Markdown

Synopsis
--------

```bash
docx2md --help|-h # produces this text
docx2md FILE_OR_DIRECTORY_LIST
```

Description
-----------

For every file specified or within a specified directory, convert files ending with the `.docx` extension to markdown using the `.md` extension.

Only converts files that end with `.docx` and don't already have a corresponding `.md` file.

Dependency
----------

pandoc is required

Examples
--------

```bash
docx2md .
docx2md file1.docx file2.docx mydir/docs
```


HELPTEXT
  exit 0;
fi

function Realpath ()
{
  /usr/bin/perl '-MCwd(abs_path)' -le '$p=abs_path(join(q( ),@ARGV));print $p if -e $p' "$*"
}

# Using Essential-IO
SCRIPTDIR="$(Realpath "$(dirname "$0")"/../scripts)"
if [[ ! -r "${SCRIPTDIR}/Essential-IO" ]]; then
  SCRIPTDIR="$(Realpath "${HOME}"/.local/scripts)"
fi
if [[ ! -r "${SCRIPTDIR}/Essential-IO" ]]; then
  SCRIPTDIR="$(Realpath "$(dirname "$0")")"
fi
if [[ ! -r "${SCRIPTDIR}/Essential-IO" ]]; then
  printf "FATAL: Missing required source file '%s'\n" "${SCRIPTDIR}/Essential-IO"
  crash
fi
# shellcheck disable=SC2250,SC1091
source "$SCRIPTDIR/Essential-IO"

function Docx_to_md()
{
  local ARG FILES=() FILE MD

  if [[ $# == 0 ]]; then
    Report_warning "Must specify at least one file or directory. Use --help for more information."
  fi

  for ARG in "$@"; do
    if [[ -d "${ARG}/." ]]; then
      for FILE in "${ARG}"/*; do
        if [[ "${FILE}" =~ .*[.]docx ]]; then
          FILES+=( "${FILE}" )
        fi
      done
    elif [[ -r "${ARG}" ]]; then
      if [[ "${ARG}" =~ .*[.]docx ]]; then
        FILES+=( "${ARG}" )
      else
        Report_warning "Skipping '${ARG}' - not Microsoft Word docx"
      fi
    else
      Report_warning "Skipping '${ARG}' - not a file or directory"
    fi
  done

  for FILE in "${FILES[@]}"; do
    if [[ "${FILE}" =~ .*[.]docx ]]; then
      MD="${FILE/docx/md}"
    else
      Report_warning "Skipping '${FILE}' - not Microsoft Word docx"
      continue
    fi
    if [[ -r "${MD}" ]]; then
      Report_info -f "Existing ${MD}"
    else
      pandoc -f docx -t gfm "${FILE}" -o "${MD}"
      Report_info -f "Created  '${MD}'"
    fi
  done
}

Docx_to_md "$@"

