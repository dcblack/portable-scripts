#!/usr/bin/env bash
export SHELL
SHELL=/bin/bash
SYNTAX="
NAME
----

$0 - use cmake to build and optionally run, test, or install

## SYNOPSIS

  $0 -h|--help
  $0 [-n] [-C DIR] [-clean][-run|-test|-install] [BUILD_OPTIONS] [ -- TEST_OPTIONS -- RUNTIME_ARGS]


## DESCRIPTION

Simple way to compile and run projects using cmake if we assume you have a
proper CMakeLists.txt setup. Essentially all this does is:

  clean -a # OPTIONAL
  cmake -B build
  cmake --build build
  ctest --test-dir build # OPTIONAL
  cmake --install

IMPORTANT: This should be run at the top of the project where the CMakeLists.txt file containing the project keyword exists.

## OPTIONS

  -help    Display this text
  -n       Don't actually do anything except show commands that would have been done
  -C DIR   Change to specified directory before doing anything else
  -clean   Remove all build files and other output bits
  -run     When done building, run the executable
  -test    When done building, run the tests
  -install When done building, install as specified by INSTALL_DIR

## CONFIGURATION

  Several variables are setup inside the script for the default locations.

"

# Setup
#------------------------------------------------------------------------------
SRC_DIR="."
BLD_DIR="build"
INSTALL_DIR="share"
PROJECT_DIR="$(pwd)"
SCRIPTS="${HOME}/.local/scripts"
APPS="${HOME}/.local/apps"
GITROOT_DIR="$(git rev-parse --show-toplevel)"
CLEAN=0
INSTALL=0
ACTION=
OPTS_SEP=0
BUILD_OPTS=
TEST_OPTS=
# shellcheck disable=SC1091
source "${SCRIPTS}/Essential-IO"
Logfile build.log
Log "% $0 $*"

#------------------------------------------------------------------------------
# Scan for command-line options
#------------------------------------------------------------------------------
while [[ $# != 0 ]]; do
  if   [[ "$1" =~ ^-{1,2}h(elp)?$ ]]; then
    Echo "${SYNTAX}"; exit
  elif [[ "$1" == "-C" ]]; then
    if [[ $# -lt 2 ]]; then
      Report_error "-C requires a directory argument"
    elif [[ ! -d "$2" ]]; then
      Report_error "'$2' is not a directory as required by -C"
    else
      if ! cd "$2"; then Report_error "Failed to change directory!?"; exit 1; fi
      PROJECT_DIR="$(pwd)"
      shift
    fi
  elif [[ "$1" == "-n" ]]; then
    export NOTREALLY
    NOTREALLY="-n"
  elif [[ "$1" =~ ^-{1,2}clean$ ]]; then
    CLEAN=1;
  elif [[ "$1" =~ ^-{1,2}install$ ]]; then
    INSTALL=1
  elif [[ "$1" =~ ^-{1,2}test$ ]]; then
    ACTION="test"
  elif [[ "$1" =~ ^-{1,2}run$ ]]; then
    ACTION="run"
  elif [[ "$1" == "--" && ${OPTS_SEP} == 0 ]]; then
    OPTS_SEP=1
  elif [[ ${OPTS_SEP} == 0 ]]; then
    BUILD_OPTS="${BUILD_OPTS} $1"
  else
    TEST_OPTS="${TEST_OPTS} $1"
  fi
  shift
done

#-------------------------------------------------------------------------------
# Validate environment
#-------------------------------------------------------------------------------
if [[ ! -r CMakeLists.txt ]]; then
  Report_error "Missing CMakeLists.txt!"
  exit 1
elif ! grep '^cmake_minimum_required' CMakeLists.txt; then
  Report_error "CMakeLists.txt missing cmake_minimum_required directive -- are you in the right directory?"
  exit 1
elif ! grep '^project' CMakeLists.txt; then
  Report_error "CMakeLists.txt missing project directive -- are you in the right directory?"
  exit 1
fi

#-------------------------------------------------------------------------------
# Locate cmake modules that we assume
#-------------------------------------------------------------------------------
CMAKE_MODULE_PATH=
for CDIR in "${GITROOT_DIR}" "${GITROOT_DIR}/externs/lib" "${APPS}" "${APPS}/lib"; do
  if [[ -d "${CDIR}/cmake" ]]; then
    CMAKE_MODULE_PATH="${CMAKE_MODULE_PATH};${CDIR}/cmake"
  fi
done
EXECUTABLE="$(basename "${PROJECT_DIR}")"
if [[ "${PROJECT_DIR}" =~ (answer|solution) ]]; then
  EXECUTABLE="${EXECUTABLE}-ans"
fi

#------------------------------------------------------------------------------
# Clear screen and add horizontal line to help if visually scrolling backward
#------------------------------------------------------------------------------
clear
ruler

#------------------------------------------------------------------------------
# Optionally start with a clean slate
#------------------------------------------------------------------------------
if [[ ${CLEAN} == 1 ]]; then
  Report_info "Cleaning ${PROJECT_DIR}"
  _do rm -fr "${BLD_DIR}"
fi

#------------------------------------------------------------------------------
Report_info "Configuring ${PROJECT_DIR}"
_do cmake -S "${SRC_DIR}" -B "${BLD_DIR}" -DCMAKE_MODULE_PATH="${CMAKE_MODULE_PATH/;/}" || exit

#------------------------------------------------------------------------------
Report_info "Compiling ${PROJECT_DIR}"
# shellcheck disable=SC2086
_do cmake --build "${BLD_DIR}" ${BUILD_OPTS} || exit

#------------------------------------------------------------------------------
Report_info "Running ${PROJECT_DIR}"
if [[ "${ACTION}" == run ]]; then
  # shellcheck disable=SC2086
  _do "${BLD_DIR}/${EXECUTABLE}" ${TEST_OPTS} || exit
elif [[ "${ACTION}" == test ]]; then
  # shellcheck disable=SC2086
  _do ctest --test-dir "${BLD_DIR}" ${TEST_OPTS} || exit
else
  Report_info "Executable is in ${BLD_DIR}/${EXECUTABLE} -- HINT: Next time add -run."
fi

#------------------------------------------------------------------------------
if [[ ${INSTALL} == 1 ]]; then
  Report_info "Installing ${PROJECT_DIR}"
  _do cmake --prefix "${INSTALL_DIR}"
fi

# vim:nospell
