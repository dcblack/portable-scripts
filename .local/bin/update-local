#!/usr/bin/env bash
#
#| NAME
#| ----
#|
#| update-local - update local files if they exist in the specified origin directories
#|
#| SYNOPSIS
#| --------
#|
#| update-local --help|-h
#| update-local [-C TO_DIR] [DIRECTORIES]
#|
#| DIRECTORIES a divided into two types:
#|
#| 1. Full paths (i.e., must start with leading "/") become source directories to copy from
#| 2. Relative directories become target directories to copy to
#|
#| EXAMPLE
#| -------
#| 
#| ```sh
#| # update files in bin with names that match files in ~/.local/bin
#| cd bin && update-local
#|
#| cd . && update-local
#|
#| # update corresponding files by name in specified directories
#| update-local project/scripts project/bin $HOME/origin/scripts $HOME/origin/bin /alt/origin/bin
#| ```
#|

function Realpath()
{ 
  if [[ $# == 0 ]]; then set - .; fi
  /usr/bin/perl '-MCwd(abs_path)' -le '$p=abs_path(join(q( ),@ARGV));print $p if -e $p' "$*"
}

function Excluded()
{
  local File Exclude
  File="$1"; shift
  for Exclude in "$@"; do
    if [[ "${File}" == "${Exclude}" ]]; then return 0; fi
  done
  return 1
}

function Update-local()
{
  export SCRIPTS_DIR
  # If not yet defined
  if [[ -z "${SCRIPTS_DIR}" ]]; then
    # Try the directory where build is located
    SCRIPTS_DIR="$(dirname "$0")"
  fi
  if [[ ! -f "${SCRIPTS_DIR}/Essential-IO" ]]; then
    # Try home installation
    SCRIPTS_DIR="${HOME}/.local/scripts"
  fi
  if [[ ! -f "${SCRIPTS_DIR}/Essential-IO" ]]; then
    Die "Unable to find Essential-IO in ${SCRIPTS_DIR}"
  fi
  # shellcheck disable=SC1091
  source "${SCRIPTS_DIR}/Essential-IO"

  #-----------------------------------------------------------------------------
  # Defaults
  #-----------------------------------------------------------------------------
  local ExecPath ExecDir LocalDir Excludes V Q N D
  ExecPath="$(Realpath "$0")"
  ExecDir="$(dirname "${ExecPath}")"
  LocalDir="$(basename "${ExecDir}")"
  Excludes=( ABOUT.md README.md README )
  V=
  Q=
  N=
  D=0

  #-----------------------------------------------------------------------------
  # Parse command-line
  #-----------------------------------------------------------------------------
  if [[ "$1" =~ ^-{1,2}h(elp)?$ ]]; then
    perl -ne 's/^#[|] ?// && print' "${ExecPath}"
    return
  fi
  while [[ "$1" =~ ^- ]]; do
    if   [[ "$1" == "-v" ]]; then V="-v";
    elif [[ "$1" == "-q" ]]; then Q="-q";
    elif [[ "$1" == "-n" ]]; then N="-n";
    elif [[ "$1" == "-d" ]]; then D=1;
    elif [[ "$1" == "-C" ]]; then 
      if [[ $# -lt 2 ]]; then Report_error "Missing argument for directory"; fi
      cd "$2" || Report_fatal "Unable to cd into $2"
      shift
    fi
    shift;
  done

  #-----------------------------------------------------------------------------
  # Collect the source and target information
  #-----------------------------------------------------------------------------
  local Dir SourceDir SourceFile TargetFile
  Sources=()
  Targets=()
  local errors=0
  for Dir in "$@"; do
    if [[ -d "${Dir}" ]]; then
      if [[ "${Dir}" =~ ^/ ]]; then
        Sources+=("${Dir}")
      else
        Targets+=("${Dir}")
      fi
      continue;
    fi
    Report_error "'${Dir}' must be a directory"
    (( ++errors ))
  done
  if [[ ${errors} -gt 0 ]]; then
    return 1
  fi
  if [[ ${#Sources} == 0 ]]; then
    Sources+=("${HOME}/.local/${LocalDir}")
  fi
  if [[ ${#Targets} == 0 ]]; then
    Targets+=(".")
  fi
  if [[ ${D} == 1 ]]; then
    Report_debug "Sources=${Sources[*]}"
    Report_debug "Targets=${Targets[*]}"
    exit 0
  fi

  #-----------------------------------------------------------------------------
  # Check for collisions
  #-----------------------------------------------------------------------------
  local CandidateFiles=()
  local errors=0
  for SourceDir in "${Sources[@]}"; do
    for TargetDir in "${Targets[@]}"; do
      for TargetFile in "${TargetDir}"/*; do
        if Excluded "${TargetFile}" "${Excludes[@]}"; then continue; fi
        for CandidateFile in "${CandidateFiles[@]}"; do
          if [[ "${TargetFile}" == "${CandidateFile}" ]]; then
            Report_error "More than one file named '${CandidateFile}' encountered!"
          else
            CandidateFiles+=("${TargetFile}")
            (( ++errors ))
          fi
        done
      done
    done
  done
  if [[ ${errors} != 0 ]]; then
    Report_info "Please fix errors."
    exit 1
  fi

  #-----------------------------------------------------------------------------
  # Do the update
  #-----------------------------------------------------------------------------
  for SourceDir in "${Sources[@]}"; do
    for TargetDir in "${Targets[@]}"; do
      for TargetFile in "${TargetDir}"/*; do
        if Excluded "${TargetFile}" "${Excludes[@]}"; then continue; fi
        SourceFile="${SourceDir}/${TargetFile}"
        if [[ -e "${SourceFile}" ]]; then
          Report_info "Updating ${TargetFile}" 
          if [[ "${N}" == "" && "${Q}" == "" ]]; then
            _do rsync -auq "${V}" "${SourceFile}" "${TargetDir}/"
          else
            _do "${N}" "${Q}" rsync -auq "${V}" "${SourceFile}" "${TargetDir}/"
          fi
        fi
      done
    done
  done
}

Update-local "$@"
