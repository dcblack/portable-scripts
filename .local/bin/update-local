#!/usr/bin/env bash
#
#| NAME
#|
#| update-local - update local files if they exist in the specified master directories
#|
#| SYNOPSYS
#|
#| update-local --help|-h
#| update-local [DIRECTORIES]

function Realpath()
{
  /usr/bin/perl '-MCwd(abs_path)' -le '$p=abs_path(join(q( ),@ARGV));print $p if -e $p' "$*"
}

function Excluded()
{
  local File Exclude
  File="$1"; shift
  for Exclude in "$@"; do
    if [[ "${File}" == "${Exclude}" ]]; then return 0; fi
  done
  return 1
}

function Update-local()
{
  local ExecPath ExecDir LocalDir Excludes
  ExecPath="$(Realpath "$0")"
  ExecDir="$(dirname "${ExecPath}")"
  LocalDir="$(basename "${ExecDir}")"
  Excludes=( ABOUT.md README.md README )

  if [[ "$1" =~ ^-{1,2}h(elp)?$ ]]; then
    perl -ne 's/^#[|] ?// && print' "${ExecPath}"
    return
  fi

  if [[ $# == 0 ]]; then
    set "${HOME}/.local/${LocalDir}"
  fi
  local errors=0
  for MasterDir in "$@"; do
    if [[ -d "${MasterDir}" ]]; then continue; fi
    echo "Error: '${MasterDir}' must be a directory" 1>&2
    (( ++errors ))
  done
  if [[ ${errors} -gt 0 ]]; then
    return 1
  fi

  local MasterDir MasterFile LocalFile UpdateList
  for MasterDir in "$@"; do
    for LocalFile in *; do
      if Excluded "${LocalFile}" "${Excludes[@]}"; then continue; fi
      MasterFile="${MasterDir}/${LocalFile}"
      if [[ -e "${MasterFile}" ]]; then
        echo "Updating ${LocalFile}"
        rsync -auq "${MasterFile}" ./
      fi
    done
  done
}

Update-local "$@"
