#!make -f
#
# Makefile for SystemC courses
#
# This version is beefed up slightly.
#
# Lines starting with #| are documentation for help target
# All targets are documented with comments formatted as #| * TAGNAME - DESCRIPTION

#|------------------------------------------------------------------------------
#|
#| Description
#| -----------
#|
#| This Makefile provides for compiling SystemC projects as simply as possible
#| to keep distractions low.
#|
#| Targets
#| -------
#|
###############################################################################
#
#   ####   ####  #     # ##### ###  ####  #    # #####  #####                   
#  #    # #    # ##    # #      #  #    # #    # #    # #                       
#  #      #    # # #   # #      #  #      #    # #    # #                       
#  #      #    # #  #  # #####  #  #  ### #    # #####  #####                   
#  #      #    # #   # # #      #  #    # #    # #  #   #                       
#  #    # #    # #    ## #      #  #    # #    # #   #  #                       
#   ####   ####  #     # #     ###  ####   ####  #    # #####                   
#
###############################################################################
# Find path to THIS file
THIS_MAKEFILE := $(realpath $(lastword ${MAKEFILE_LIST}))
PHONIES := $(shell perl -lane 'print $$1 if m{^([a-zA-Z][-a-zA-Z0-9_]*):[^=]*$$};' ${THIS_MAKEFILE})

## Variable that points to SystemC-2.3 installation path (or use environment variable)
# SYSTEMC_HOME = /your/override/systemc
# otherwise search in standard places
ifndef SYSTEMC_HOME
  ifdef SYSTEMC
    SYSTEMC_HOME := ${SYSTEMC}
  else
    SYSTEMC_HOME := $(firstword $(wildcard $(addsuffix apps/systemc,${HOME}/.local/ ${HOME}/ /)))
  endif
endif
$(info INFO: Using SYSTEMC_HOME=${SYSTEMC_HOME})
ifeq "$(words $(wildcard ${SYSTEMC_HOME}/include))" "0"
  $(error SYSTEMC_HOME does not refer to a valid directory!)
endif
ifndef MODULE
  $(warning Makefile should specify MODULE. Defaulting to use 'run')
  MODULE := run
else
  MODULE := $(basename ${MODULE})
endif

ifndef OBJS
  OBJS:=${SRCS}
  OBJS:=$(patsubst %.cpp,%.o,${OBJS})
  OBJS:=$(patsubst %.c,  %.o,${OBJS})
endif
# Tool-chain options
ifndef CPPSTD
  CPPSTD := 17
endif
ifndef CXX
  CXX  := g++  
endif
ifndef CC
  CC   := gcc
endif
ifndef LD
  LD   := g++
endif
ifndef OPT
  OPT  := -O2
endif
OPT += -std=c++${CPPSTD}
DEBUG  := -g
## Build with maximum gcc warning level
CFLAGS := --pedantic -Wall -Wextra
CFLAGS += -Wno-unused-parameter
CFLAGS += -fstack-usage
ifdef CDEFS
  CFLAGS += $(addprefix -D,$(patsubst -D%,%,${CDEFS}))
endif
CFLAGS += ${DEBUG} ${OPT} ${EXTRACFLAGS}
# Link with extra info
MAPFLAGS := -Wl,-Map=${MODULE}.map,--print-map,--cref,--print-gc-sections,--print-memory-usage
LDFLAGS := ${MAPFLAGS}

#-------------------------------------------------------------------------------
# For autotools installations
#-------------------------------------------------------------------------------
TARGET_ARCH=linux64
-include $(dir ${THIS_MAKEFILE})Makefile.arch

# Refer to the include/ and (appropriate) lib/ directories
SYSDIR  := ${SYSTEMC_HOME}/include
LIBDIRS := $(wildcard ${SYSTEMC_HOME}/lib ${SYSTEMC_HOME}/lib-${TARGET_ARCH})
ifeq "$(words ${LIBDIRS})" "1"
  LIBDIR  := $(firstword ${LIBDIRS})
  SETUP_PROFILE := $(dir ${THIS_MAKEFILE})setup.profile
  ifeq "$(wildcard ${SETUP_PROFILE})" ""
    $(shell echo "#!/bin/sh"                                              >"${SETUP_PROFILE}")
    $(shell echo ""                                                      >>"${SETUP_PROFILE}")
    $(shell echo 'SYSTEMC_HOME="${SYSTEMC_HOME}"'                        >>"${SETUP_PROFILE}")
    $(shell echo 'LD_LIBRARY_PATH="${LIBDIR}:$${LD_LIBRARY_PATH}"'       >>"${SETUP_PROFILE}")
    $(shell echo 'DYLD_LIBRARY_PATH="${LIBDIR}:$${DYLD_LIBRARY_PATH}"'   >>"${SETUP_PROFILE}")
    $(shell echo 'export SYSTEMC_HOME LD_LIBRARY_PATH DYLD_LIBRARY_PATH' >>"${SETUP_PROFILE}")
    $(shell perl -pi -e '$$d=chr(36);s{${HOME}/}{$${d}{HOME}/}g' "${SETUP_PROFILE}")
    $(info INFO: Optionally you may choose to source ${SETUP_PROFILE})
  endif
else
  $(error Unable to determine systemc library directory - possibly bad SYSTEMC_HOME reference or SystemC installation.)
endif

INCOPTS := -I. -I.. -I${SYSDIR}
LIBOPTS := -L. -L.. -L${LIBDIR}

LIBS   :=  -lstdc++ -lm ${EXTRA_LIBS} -lsystemc

ifndef EXE
EXE    := ${MODULE}.x
endif

###############################################################################
#
#  #####  #    # #     #####  ####                                              
#  #    # #    # #     #     #    #                                             
#  #    # #    # #     #     #                                                  
#  #####  #    # #     #####  ####                                              
#  #  #   #    # #     #          #                                             
#  #   #  #    # #     #     #    #                                             
#  #    #  ####  ##### #####  ####                                              
#
###############################################################################
.DEFAULT_GOAL := all
.PHONY: $(PHONIES)

all: run

#| * help - display documentation
help:
	@grep '^#|' ${THIS_MAKEFILE} | cut -c 3-

#| * compile - simply compile all source files into object files
compile: ${OBJS}

#| * link - links objects into an executable
link: ${EXE}

#-------------------------------------------------------------------------------
#| * cmake - uses to cmake to create an executable.
#-------------------------------------------------------------------------------
#|           NOTE: This is a new optional approach and not yet documented in the
#|           workbook. Ask your instructor if interested.
BUILD_DIR ?= build-cmake
cmake:
	@rm -f "${EXE}"
	mkdir -p ${BUILD_DIR}; cd ${BUILD_DIR}; cmake ..; make
	@ln -s "${BUILD_DIR}/${EXE}"

#-------------------------------------------------------------------------------
# Link
#-------------------------------------------------------------------------------
${EXE}: ${OBJS}
ifdef VERBOSE
	@echo "# Linking $?"
endif
	${LD} ${CFLAGS} ${LDFLAGS} ${LIBOPTS} -o $@ ${OBJS} ${LIBS} 2>&1 | c++filt

#-------------------------------------------------------------------------------
# Compile C++
#-------------------------------------------------------------------------------
## based on http://www.paulandlesley.org/gmake/autodep.html
%.o : %.cpp
ifdef VERBOSE
	@echo "# Compiling $<"
endif
	${CXX} ${CFLAGS} ${INCOPTS} -c -MMD -o $@ $<
	@cp $*.d $*.P; \
	sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	-e '/^$$/ d' -e 's/$$/ :/' < $*.d >> $*.P; \
	rm -f $*.d

#-------------------------------------------------------------------------------
# Compile C
#-------------------------------------------------------------------------------
%.o : %.c
ifdef VERBOSE
	@echo "# Compiling C $<"
endif
	${CC} ${CFLAGS} ${INCOPTS} -c -MMD -o $@ $<
	@cp $*.d $*.P; \
	sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	-e '/^$$/ d' -e 's/$$/ :/' < $*.d >> $*.P; \
	rm -f $*.d

-include $(SRCS:.cpp=.P)

#-------------------------------------------------------------------------------
#| * run - Executes the simulation. (Recompiles and links as needed)
#|         Allows for definition of ARGS, STDIN, STDOUT, STDERR, STDLOG
#-------------------------------------------------------------------------------
run: ${EXE}

ifdef VERBOSE
	@echo "# Executing $<"
endif
	time env LD_LIBRARY_PATH="${LIBDIR}:$$LD_LIBRARY_PATH" "./${EXE}"$(if ${ARGS}, "${ARGS}")$(if ${STDIN}, <"${STDIN}")$(if ${STDERR}, >"${STDERR}")$(if ${STDIN}, ">${STDIN}")$(if ${STDLOG}, |tee "${STDLOG}")

#-------------------------------------------------------------------------------
#| * gdb - Use gdb debugger on the simulation. (Recompiles and links as needed)
#-------------------------------------------------------------------------------
gdb: ${EXE}

ifdef VERBOSE
	@echo "# Executing $<"
endif
	env LD_LIBRARY_PATH="${LIBDIR}:$$LD_LIBRARY_PATH" gdb "./${EXE}"

#-------------------------------------------------------------------------------
#| * clean - Cleans up the directory by removing all generated files.
#-------------------------------------------------------------------------------
#|           NOTE: Do not clean before every compile because that defeats the
#|           purpose of make. Only use this in exceptional circumstances.
clean:
	-rm -fr ${OBJS} *~ "${EXE}" *.vcd *.wif *.isdb *.dmp *.P *.log ${BUILD_DIR}

# vim:syntax=make:nospell
#|
#|------------------------------------------------------------------------------
# The end
